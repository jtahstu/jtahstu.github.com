<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"><head><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/analytics.js" async=""></script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/postmoduletext.js" async=""></script>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>代码的印象派：写点好代码吧 - Dennis Gao - 博客园</title>
<link type="text/css" rel="stylesheet" href="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/bundle-iMetro_HD.css">
<link type="text/css" rel="stylesheet" href="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/77744.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/gaochundong/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/gaochundong/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/gaochundong/wlwmanifest.xml">
<script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/encoder.js" type="text/javascript"></script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/gpt.js" type="text/javascript" async=""></script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'gaochundong', cb_enable_mathjax=true;</script>
<script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.js" type="text/javascript"></script>
<script type="text/x-mathjax-config;executed=true">MathJax.Hub.Config({
  tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']] },
  TeX: { equationNumbers: { autoNumber: ['AMS'], useLabelIds: true } },
  'HTML-CSS': { linebreaks: { automatic: true } },
  SVG: { linebreaks: { automatic: true } }});</script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/MathJax.js" type="text/javascript"></script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/pubads_impl_62.js" type="text/javascript" async=""></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Hover_Arrow {position: absolute; width: 15px; height: 11px; cursor: pointer}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style></head>
<body><div style="display: none;" id="MathJax_Message"></div>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<a href="https://github.com/gaochundong"><img style="position: absolute; top: 0; right: 0; border: 0;" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875.png" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>
<!--PageBeginHtml Block End-->

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/gaochundong/"><img id="blogLogo" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/gaochundong/">Scale-out Thinking</a></h1>
<h2>Be a mindful and humble developer</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/gaochundong/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/Dennis%20Gao">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/gaochundong/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/gaochundong/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats"><font>{ 文章 : 198, 评论 : 1607 }</font></div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<span id="transmark"></span><div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html">代码的印象派：写点好代码吧</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><span style="line-height: 1.5;">最近有一位猎头顾问打电话询问是否有换工作的意向，对推荐的公司和职位的描述为："我们这里有一家非常关注软件质量的公司，在寻找一位不仅能完成有挑战的软件开发任务，并且还对代码质量有非常高追求的软件工程师。"。</span></p>
<p>很难得猎头顾问会以这样的切入点来推荐职位，而不是诸如&nbsp;"我们是互联网公司"，"我们是著名互联网公司"，"我们可以提供业内领先的薪
资"，"我们创业的方向是行业的趋势"，"我们提供创业公司期权"，"我们提供人体工程座椅"，"我们公司漂亮妹子多" 等等。</p>
<p>谁会为了把椅子或者每天能看公司漂亮的前台妹子而跳槽呢？将这些描述可以概括成一点，就是 "我们给的钱多"。诚然，好的薪水是可以招募到杰出的软件工程师的。然而，优秀的软件工程师通常已经得到了较好的薪水，所以如果不是给出足够的量，不一定会为五斗米而折腰。大多数的软件工程师更看重的是技术兴趣，所以诸如 "来我们这做 Openstack 吧"，"我们需要用 Go 实现 Docker 相关组件的人才" 看起来更有吸引力。</p>
<p>而软件质量，代码风格，则是另一个吸引优秀工程师的方向。追求卓越软件质量的工程师，通常有着自己的软件设计与实现思路，并在不断的实践中锤炼出自己的编程风格和代码品味<span style="line-height: 1.5;">。这一类工程师，其实无关使用什么语言、做什么产品，他们会始终保持自己的品味，追求软件实现的卓越，进而产出高质量的软件。更重要的是，优秀的工程师希望与更多优秀的工程师合作，并更愿意工作在崇尚代码质量的氛围中。</span></p>
<p>一般条件下，对软件质量的要求通常与软件生命周期的长短相关。按照软件生命周期的长短，我们可以将软件公司分为两类：</p>
<ul>
<li>快公司：创业公司，互联网公司。推崇快速开发，快速试错。软件生命周期较短，代码质量相对要求不高。</li>
<li>慢公司：传统行业软件公司，产品公司。推崇稳定可靠的软件设计。软件生命周期较长，代码质量相对要求较高。</li>
</ul>
<p>软件生命周期的长短，通常也决定了实现软件所使用的编程语言。比如，快公司通常会使用 PHP/Python/Ruby 等动态类型语言，而慢公司通常会选择 C/C++/C#/Java 等静态类型语言。</p>
<p>当猎头顾问还没有说出公司的名字之前，我们也可以大体猜测出该公司所属的行业方向或软件产品类型。比如，该公司可能来自传统的金融、电信、医疗、石
油、ERP 行业等，这些行业中有 IBM、Huawei、GE、Schlumberger、SAP 等等世界 500 
强巨头更重视软件质量。当然，通常推崇软件质量的公司中，大概率条件下碰到的会是外企，即使是中小外企，也会对软件质量有相对较高的要求。对于产品类型，
越是接近&nbsp;Mission Critical 
的产品形态则对软件质量的要求越高。各种软件中间件的软件质量要求也相对较高，比如内存数据库、Message Queue 等。或者如果区分 
Framework 和 Application，则 Framework 的软件质量显然要求更高。</p>
<p>每一家较成熟的软件公司，都会设计自己的软件编码规范，增强软件工程师的协同效应，相互之间可以读懂对方的代码。但实际操作中，又有多少人会执着遵
守呢？编码规范并不能保证产生出好代码，那代码编写的好坏又如何具体衡量呢？笔者经历过的公司中，多半都是以软件发布后的&nbsp;Bug 
数量来衡量软件的质量的，这种统计形式简单粗暴，优点就是可以量化，缺点就是很难评判出软件代码编写的优雅程度。我听过一则笑话，说软件质量也不能做的太
好，软件一定要有&nbsp;Bug，这样客户才会买我们的服务，而我们就是靠后期卖服务赚钱的。好吧，情何以堪~~</p>
<p>好了，说了这么多，好像文不切题，这篇文章不是叫《<a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" target="_blank">代码的印象派</a>》吗？和上面说的这些有什么关系呀？</p>
<p>关系就在于，软件质量与代码编写的优雅程度息息相关。而是否能编写出优雅的代码与软件工程师的个人风格和品味息息相关。</p>
<p>在软件工程领域，通常生命周期长的软件会有着更高的软件质量需求，描述软件质量的内容可以参考下面两篇文章。</p>
<ul>
<li><a href="http://www.cnblogs.com/gaochundong/p/what_is_quality.html" target="_blank">Quality 是什么？</a></li>
<li><a href="http://www.cnblogs.com/gaochundong/p/software_quality_models.html" target="_blank">软件质量模型</a></li>
</ul>
<p>在各种软件质量模型的描述中，都包含着软件可维护性（Maintainability）这一属性。而越是生命周期长的软件，对其软件可维护性的要求
越高。而提高软件可维护性的根本方式就是编写可阅读的代码，让其他人理解代码的时间最小化。代码生来就是为人阅读的，只是顺便在机器上执行以完成功能。</p>
<p>在漫长的软件生命周期中，我们有很多机会去修改软件代码，比如发现了新的 
Bug、增加新的功能、改进已有功能等。修改代码的第一步当然就是阅读代码，以了解当前的设计和思路。如果代码都读不懂的话，何谈修改呢？还有，大概率条
件下，修复自己实现模块的 Bug 的人通常就是你自己，如果时隔几个月后自己都读不懂自己编写的代码，会是什么感受呢？</p>
<p>所以，如何编写出易读的代码就成了问题的关键。而能否编写出易读代码，则直接取决于软件工程师自己的的编程风格和代码品味。</p>
<p>在《<a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" target="_blank">孙子兵法</a>》中有云："上兵伐谋，其次伐交，其次伐兵，其下攻城。攻城之法，为不得已。" 对应到软件领域，软件架构师可以通过出色的系统分析来构建可演进的软件架构，讲究谋略；而软件工程师则通过良好的设计和编程风格来完成攻城任务，讲究方法。</p>
<p>Paul Graham 的《<a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" target="_blank">黑客与画家</a>》中描述了黑客与画家的共同点，就是他们都是创作者，并且都在努力创作优秀的作品。画家创作的作品就是画，内嵌着自己的风格和品味。软件工程师的作品就是软件和代码，如果可以的话，你可以将代码打印成卷，出版成书，只是，阅读的人会向你那样幸福吗？</p>
<p>画家的作品都会保留下来，如果你把一个画家的作品按照时间顺序排列，就会发现每幅画所用的技巧，都是建立在上一幅作品学到的东西之上。某幅作品如果
特别出众，你往往能在更早期的作品中找到类似的版本。软件工程师也是通过实践来学些编程，并且所进行的工作也是具有原创性的，通常不会有他人的完美的成果
可以依靠，如果有的话我们为什么还要再造轮子呢？</p>
<p>创作者的另一个学习途径是通过范例。对于画家而言，临摹大师的作品一直是传统美术教育的一部分，因为临摹迫使你仔细观察一幅画是如何完成的。软件工
程师也可以通过学习优秀的程序源码来学会编程，不是看其执行结果，而是看源码实现思路和风格。优秀的软件一定都是在软件工程师对软件美的不懈追求中实现
的，现如今有众多优秀的开源软件存在，如果你查看优秀软件的内部，就会发现，即使在那些不被人知的部分，也同样被优美的实现着。</p>
<p>所以说，代码是有画面感的，看一段代码就可以了解一个软件工程师的风格，进而塑造出该工程师在你心目中的印象。工作中，我们每天都在阅读同事们的代
码，进而对不同的同事产生不同的印象，对各种不同印象的感受也在不断影响着自身风格的塑造。代码的印象派，说的就是，你想让你的同事对你产生何种印象呢？</p>
<p>笔者不能自诩为我就是那类有着良好的编程风格，并且代码品味高雅的软件工程师，只能说，我还在向这个目标努力着。风格和品味不是一朝一夕就能养成
的，世间存在多少种风格我们也无法列举，而说某种风格比另一种风格要好也会陷入无意的争辩。况且，软件工程师多少都会有点自恋情节，在没有见到更好的代码
之前，始终都会感觉自己写出的代码就是好代码，并且有时不管你说什么，咱就是这个味儿！</p>
<p>我个人总结了几点关于优雅代码风格的描述：</p>
<ul>
<li>代码简单：不隐藏设计者的意图，抽象干净利落，控制语句直截了当。</li>
<li>接口清晰：类型接口表现力直白，字面表达含义，API 相互呼应以增强可测试性。</li>
<li>依赖项少：依赖关系越少越好，依赖少证明内聚程度高，低耦合利于自动测试，便于重构。</li>
<li>没有重复：重复代码意味着某些概念或想法没有在代码中良好的体现，及时重构消除重复。</li>
<li>战术分层：代码分层清晰，隔离明确，减少间接依赖，划清名空间，理清目录。</li>
<li>性能最优：局部代码性能调至最优，减少后期因性能问题修改代码的机会。</li>
<li>自动测试：测试与产品代码同等重要，自动测试覆盖 80% 的代码，剩余 20% 选择性测试。</li>
</ul>
<p>下面，我会列举一些我在工作中遇到的不同的编程风格，用切身的体会来感悟代码的风格和品味。当然，吐槽为主，因为据说在 Code Review 时记录说 "我擦" 的数量就可以衡量代码的好坏。</p>
<h2>变量</h2>
<p>关于变量，很遗憾，不得不提变量的命名。时至今日，在 Code Review 中仍然可以看到下面这样的代码。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Job
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DateTime StartTime;
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DateTime mStartTime;
</span><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DateTime m_StartTime;
</span><span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DateTime _StartTime;
</span><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime endTime;
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Command pCommand;
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> schId;
</span><span style="color: #008080;">10</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="line-height: 1.5;">有各种奇葩的前缀出现，有时同一个人的命名居然也不统一。虽然，眼睛和大脑在重
复的观察变量名后会自动学习以忽略前缀，并不会太影响阅读。实际上，使用前缀的目的主要是为了在局部代码中区分全局变量和局部变量。使用类似于 C# 
这样的高级语言，我们已经不再需要为变量添加前缀了，可以利用 this 关键字来区分。如果非要添加的话，建议使用 "_" 
单下划线前缀，促进大脑更快速的忽略。</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Job
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span> DateTime _startTime; <span style="color: #008000;">//</span><span style="color: #008000;"> use _ as prefix</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">private</span> DateTime endTime; <span style="color: #008000;">//</span><span style="color: #008000;"> no prefix</span>
<span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime StartTime
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 8</span>       <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> _startTime; }
</span><span style="color: #008080;"> 9</span>       <span style="color: #0000ff;">set</span> { _startTime =<span style="color: #000000;"> value; }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span> 
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime EndTime
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">14</span>       <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span><span style="color: #000000;"> endTime; }
</span><span style="color: #008080;">15</span>       <span style="color: #0000ff;">set</span> { endTime =<span style="color: #000000;"> value; }
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">long</span> ScheduleId { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span>; } <span style="color: #008000;">//</span><span style="color: #008000;"> or no field needed</span>
<span style="color: #008080;">19</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>将 Field 标记为 public 应该是没有分清 Field 与 Property 的作用，进而推测对面向对象编程中的封装概念理解也不会有多好。</p>
<p>使用 "p" 前缀的显然有 C/C++ 编程情节，想描述这个变量是一个指针，好吧，这种写法在 C# 中只能称为不伦不类。</p>
<p>使用缩写，这里的 "sch" 其实是想代表 "schedule"，但在没有上下文的条件下谁能想的出来呢？我个人是绝对不推荐使用缩写的，除非是普世的理解性存在，例如 "obj", "ctx", "pwd", "ex", "args" 这样非常常见的缩写。</p>
<p>使用拼音和有拼写错误的单词作为变量名会直接拉低工程师的档次。使用合适单词描述可以直接提高代码的质量，比如通常 "Begin", "End"
 会成对儿出现，上面的示例代码中涉及到了时间，"StartTime" 和 "BeginTime" 是同义词，所以我们参考了 Outlook 
Calendar 中的默认术语，也就是 "StartTime" 和 "EndTime"，也就是找范例。</p>
<p>在局部变量的使用中，我认为有一种使用方式是值得推荐的，那就是 "解释性变量"。当今的编程风格中流行使用 Fluent API，这样会产生类似于下面这样的代码。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;">1</span>       <span style="color: #0000ff;">if</span>(DateTimeOffset.UtcNow &gt;= 
<span style="color: #008080;">2</span> <span style="color: #000000;">        period
</span><span style="color: #008080;">3</span> <span style="color: #000000;">          .RecurrenceRange.StartDate.ConvertTime(period.TimeZone)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">          .Add(schedule.Period.StartTime.ConvertTime(period.TimeZone).TimeOfDay))
</span><span style="color: #008080;">5</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">6</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> do something</span>
<span style="color: #008080;">7</span>       }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="line-height: 1.5;">这一串 "." 看着好帅气，但我是理解不了这是要比较什么。可以简单重构为解释性变量。</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;">1</span>       <span style="color: #0000ff;">var</span> firstOccurrenceStartTime = 
<span style="color: #008080;">2</span> <span style="color: #000000;">        period
</span><span style="color: #008080;">3</span> <span style="color: #000000;">          .RecurrenceRange.StartDate.ConvertTime(period.TimeZone)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">          .Add(schedule.Period.StartTime.ConvertTime(period.TimeZone).TimeOfDay);
</span><span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span>       <span style="color: #0000ff;">if</span>(DateTimeOffset.UtcNow &gt;=<span style="color: #000000;"> firstOccurrenceStartTime)
</span><span style="color: #008080;">7</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">8</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> do something</span>
<span style="color: #008080;">9</span>       }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<h2>构造函数</h2>
<p>很多工程师还没有理解好构造函数的功效和使用方式，在选择依赖注入方式时，更倾向于使用属性依赖注入。个人认为，使用 "属性依赖注入" 
是懒惰的一种表现，其不仅打破了信息隐藏的封装，而且还可以暴露了本不需要暴露的部分。使用构造函数进行依赖注入是最正确的方式，我们应该竭尽全力将代码
重构到这一点。</p>
<p>好的，你说的，我信了！并且，我也开始这么做了！绝对纯净的构造函数注入！</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Schedule
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> Schedule(<span style="color: #0000ff;">long</span> templateId, <span style="color: #0000ff;">long</span><span style="color: #000000;"> seriesId,
</span><span style="color: #008080;"> 4</span>       <span style="color: #0000ff;">long</span> promotionId, <span style="color: #0000ff;">bool</span><span style="color: #000000;"> isOnceSche, DateTime startTime, DateTime endTime,
</span><span style="color: #008080;"> 5</span>       List&lt;TimeRange&gt;<span style="color: #000000;"> blackOutList, ScheduleAddtionalConfig addtionalConfig,
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">      IDateTimeProvider tProvider, IScheduleMessageProxy proxy,
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">      IAppSetting appSetting, RevisionData revisionData)
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>好吧，你赢了！构造函数居然有 12 个参数，距离史上最长的构造函数不远了。</p>
<p>一般写成这样的代码已经表示没法看了，而且注定类的设计也不怎么样，这要是遗留下来的 Legacy Code，不知道维护者心情几何？</p>
<p>还有一类构造函数问题就是参数顺序，这直接体现了软件工程师最终他人的基本素养。因为构造函数生来就是为使用者准备的，而为使用者设计合理的参数顺序是类设计者的基本职责。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Command
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> Command(<span style="color: #0000ff;">int</span> argsA, <span style="color: #0000ff;">int</span><span style="color: #000000;"> argsB)
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">public</span> Command(<span style="color: #0000ff;">int</span> argsC, <span style="color: #0000ff;">int</span> argsB, <span style="color: #0000ff;">int</span><span style="color: #000000;"> argsA)
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>上面这种反人类思维的参数顺序，怎么描述呢？写成下面这样有多大难度？</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Command
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> Command(<span style="color: #0000ff;">int</span> argsA, <span style="color: #0000ff;">int</span><span style="color: #000000;"> argsB)
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">public</span> Command(<span style="color: #0000ff;">int</span> argsA, <span style="color: #0000ff;">int</span> argsB, <span style="color: #0000ff;">int</span><span style="color: #000000;"> argsC)
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<h2>属性</h2>
<p>蹩脚的属性设计常常彰显抽象对象类型的能力。以下面这个 Schedule 类为例，Schedule 业务上存在 Once 和 Recurring 两种状态。我们最初看到的类是这个样子的。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;">1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Schedule
</span><span style="color: #008080;">2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">public</span> Schedule(<span style="color: #0000ff;">bool</span><span style="color: #000000;"> isOnceSchedule)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">5</span>       IsOnceSchedule =<span style="color: #000000;"> isOnceSchedule;
</span><span style="color: #008080;">6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">7</span> 
<span style="color: #008080;">8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span> IsOnceSchedule { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">9</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>看来这是想通过构造函数直接注入指定状态，但 IsOnceSchedule 属性的 set 又是 public 的允许修改，不仅暴露了封装，还没有起到隐藏的效果！</p>
<p>那么，稍微改进下，试图消灭 IsOnceSchedule 属性，引入继承机制。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Schedule
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">  }
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> OnceSchedule : Schedule
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">  }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> RecurringSchedule : Schedule
</span><span style="color: #008080;">10</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">11</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>实现上在 OnceSchedule 和 RecurringSchedule 中均封装独立的实现。如果非要通过父类抽象暴露 Recurring 状态，可以在父类中通过属性暴露只读接口。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Schedule
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Schedule()
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span>       <span style="color: #0000ff;">this</span>.IsRecurring = <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span> IsRecurring { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> OnceSchedule : Schedule
</span><span style="color: #008080;">12</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">13</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> OnceSchedule()
</span><span style="color: #008080;">14</span>       : <span style="color: #0000ff;">base</span><span style="color: #000000;">()
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">16</span>       <span style="color: #0000ff;">this</span>.IsRecurring = <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">18</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> RecurringSchedule : Schedule
</span><span style="color: #008080;">21</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">22</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> RecurringSchedule()
</span><span style="color: #008080;">23</span>       : <span style="color: #0000ff;">base</span><span style="color: #000000;">()
</span><span style="color: #008080;">24</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">25</span>       <span style="color: #0000ff;">this</span>.IsRecurring = <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">27</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<h2>函数</h2>
<p>我们或许都知道，函数命名要动词开头，如需要可与名词结合。而函数设计的要求是尽量只做一件事，这件事有时简单有时困难。</p>
<p>简单的可以像下面这种一句话代码：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">bool</span><span style="color: #000000;"> CheckDateTimeWeekendDay(DateTimeOffset dateTime)
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">3</span>       <span style="color: #0000ff;">return</span> dateTime.DayOfWeek ==<span style="color: #000000;"> DayOfWeek.Saturday 
</span><span style="color: #008080;">4</span>         || dateTime.DayOfWeek ==<span style="color: #000000;"> DayOfWeek.Sunday;
</span><span style="color: #008080;">5</span>     }</pre>
</div>
<p>复杂的见到几百行的函数也不新奇。拆解长函数的方法有很多，这么不做赘述。这里推荐一种使用 C# 语法糖衍生出的函数设计方法。</p>
<p>上面的小函数其实是非常过程化的代码，其是为类 DateTimeOffset 服务，我们可以使用 C# 中的扩展方法来优化这个小函数。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;">1</span>   <span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DateTimeOffsetExtensions
</span><span style="color: #008080;">2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">bool</span> IsWeekendDay(<span style="color: #0000ff;">this</span><span style="color: #000000;"> DateTimeOffset dateTime)
</span><span style="color: #008080;">4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">5</span>       <span style="color: #0000ff;">return</span> dateTime.DayOfWeek ==<span style="color: #000000;"> DayOfWeek.Saturday
</span><span style="color: #008080;">6</span>         || dateTime.DayOfWeek ==<span style="color: #000000;"> DayOfWeek.Sunday;
</span><span style="color: #008080;">7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">8</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>这样，我们就可以像下面这样使用了，感觉会不会好一些？</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>       <span style="color: #0000ff;">if</span><span style="color: #000000;">(DateTimeOffset.Now.IsWeekendDay())
</span><span style="color: #008080;">2</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">3</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> do something</span>
<span style="color: #008080;">4</span>       }</pre>
</div>
<p>在设计函数时，我们时常犹豫的是，到底应该返回一个 null 值还是应该抛出一个异常呢？</p>
<p>答案就是，如果你总是期待函数返回一个值时，而值不存在则应该抛出异常；如果你期待函数可以返回一个不存在的值，则可以返回 null。总之，不要因为懒惰而使得应该设计抛出异常的函数最终返回了 null，不幸的是，这种懒惰经常出现。</p>
<p>正常的代码是不需要 try..catch.. 的，异常就应该一抛到底直至应用程序崩溃，当然，这是开发阶段。一抛到底有利于发现已有代码路径中
的错误，毕竟异常在正常逻辑中是不应该产生的。我们要做的是，合理期待某调用可能会产生某类异常，则直接 catch 该特定异常，如 catch 
(System.IO.FileNotFoundException ex)。</p>
<p>实际上，遇到这种抉择场景，我们可以在函数命名上下些功夫，以变相解决问题。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #0000ff;">object</span> FindObjectOrNull(<span style="color: #0000ff;">string</span><span style="color: #000000;"> key);
</span><span style="color: #008080;">2</span>     <span style="color: #0000ff;">object</span> FindObjectOrThrow(<span style="color: #0000ff;">string</span><span style="color: #000000;"> key);
</span><span style="color: #008080;">3</span>     <span style="color: #0000ff;">object</span> FindObjectOrCreate(<span style="color: #0000ff;">string</span> key, <span style="color: #0000ff;">object</span><span style="color: #000000;"> dataNeededToCreateNewObject);
</span><span style="color: #008080;">4</span>     <span style="color: #0000ff;">object</span> FindObjectOrDefault(<span style="color: #0000ff;">string</span> key, Object defaultReturnValue);<span style="font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 1.5; background-color: #ffffff;">&nbsp;</span></pre>
</div>
<h2>单元测试</h2>
<p>在开始写代码的时候就开始考虑测试问题，有利于产生易于测试的代码。幸运的是，对测试友好的设计会很自然的产生良好的代码。</p>
<p>测试驱动开发（TDD）是一种编程风格，包含 TDD 三定律：</p>
<ol>
<li>在编写不能通过的单元测试前，不能编写生产代码；</li>
<li>只编写刚好无法通过的单元测试，不能编译不算通过；</li>
<li>只编写刚好通过当前失败测试的生产代码；</li>
</ol>
<p>我们显然可以循规蹈矩的遵循上述 TDD 三定律风格编程，但 TDD 
只是通过测试来保证代码质量，驱动良好设计的一种风格，我们没有必要完全强迫自己遵循上述定律，找到适合自己的过程可能效率更高，所以重点在于，要写单元
测试，通过写代码时思考测试这件事来帮助把代码写的更好。</p>
<p>测试代码不是二等公民，它和生产代码一样重要。他需要被思考、被设计、被维护，并且要像生产代码一样保持优雅的风格。</p>
<h3>单元测试测什么？</h3>
<p>在单元测试中，可通过两种方式来验证代码是否正确地工作。一种是基于结果状态的测试，一种是基于交互行为的测试。这两种方式在文章《<a href="http://www.cnblogs.com/gaochundong/archive/2013/06/05/ut_test_state_or_test_interaction.html" target="_blank">单元测试的两种方式</a>》中有描述，这里就不再赘述。</p>
<h3>单元测试的可读性</h3>
<p>在测试代码中，可读性仍然很重要。如果测试代码的可读性良好，使其更易于后期的维护和修改，不至于是测试代码腐化以致被删除。</p>
<p>下面是一些良好测试的关键点：</p>
<ul>
<li>测试越简明越好，每个测试只关注一个点。</li>
<li>如果测试运行失败，则其应发出有帮助性的错误消息或提示。</li>
<li>使用简单明确的测试输入条件。</li>
<li>给测试用例取一个可描述的名字。</li>
</ul>
<p>那么，具体什么样的单元测试用例名称，算是好名称呢？这里推荐两种：</p>
<ul>
<li>第一种：使用 Test_&lt;ClassName&gt;_&lt;FunctionName&gt;_&lt;Situation&gt; 风格；</li>
<li>第二种：使用 Given_&lt;State&gt;_When_&lt;Behavior&gt;_Then_&lt;SomethingHappen&gt; 风格；</li>
</ul>
<p>第二种实际上是 BDD 风格，其不仅可以应用于单元测试，在更高级的 <a href="http://www.cnblogs.com/gaochundong/p/building_the_testing_pipeline.html" target="_blank">Component Level</a> 和 <a href="http://www.cnblogs.com/gaochundong/p/building_the_testing_pipeline.html" target="_blank">System Level</a> 的测试中同样有效。</p>
<p>实际上，单元测试用例代码的内部实现也是有风格可遵循，常见的就是&nbsp;<a href="http://xp123.com/articles/3a-arrange-act-assert/" target="_blank">Arrange-Act-Assert (AAA) </a>模式。</p>
<h3>第三方组件代码不便于测试</h3>
<p>在文章《<a href="http://www.cnblogs.com/gaochundong/p/design_for_testability_transparent_and_opaque_dependencies.html" target="_blank">类依赖项的不透明性和透明性</a>》中描述了依赖项对单元测试的影响，实践中，我们碰到最多的是调用其他类库的代码而导致的不可测试性。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MyClass
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Job _job;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MyClass()
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 7</span>       _job = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Job();
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ExecuteJob()
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">      _job.Execute();
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">sealed</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Job
</span><span style="color: #008080;">17</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Execute()
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">20</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> do something heavy</span>
<span style="color: #008080;">21</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">22</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>上面的代码，如果写一个 TestCase 的话，可能是下面这种情况。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">  [Test]
</span><span style="color: #008080;">2</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Test_MyClass_ExecuteJob()
</span><span style="color: #008080;">3</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">4</span>     MyClass instance = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MyClass();
</span><span style="color: #008080;">5</span> <span style="color: #000000;">    instance.ExecuteJob();
</span><span style="color: #008080;">6</span> 
<span style="color: #008080;">7</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> what should we assert?</span>
<span style="color: #008080;">8</span>   } </pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>这样，调用了 instance.ExecuteJob() 导致了不知道如何验证。同时，由于 Job 类使用了 sealed 关键字，并且没有实现任何接口，所以也无法通过 mocking 库来 mock。</p>
<p>解决办法，增加中间层。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MyClass
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> IJob _job;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> MyClass(IJob job)
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 7</span>       _job =<span style="color: #000000;"> job;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ExecuteJob()
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">      _job.Execute();
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> JobProxy : IJob
</span><span style="color: #008080;">17</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Job _realJob;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> JobProxy(Job job)
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">22</span>       _realJob =<span style="color: #000000;"> job;
</span><span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Execute()
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">27</span> <span style="color: #000000;">      _realJob.Execute();
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">29</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> IJob
</span><span style="color: #008080;">32</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">33</span>     <span style="color: #0000ff;">void</span><span style="color: #000000;"> Execute();
</span><span style="color: #008080;">34</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">35</span> 
<span style="color: #008080;">36</span>   <span style="color: #008000;">//</span><span style="color: #008000;"> third-party Job Class</span>
<span style="color: #008080;">37</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">sealed</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Job
</span><span style="color: #008080;">38</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">39</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Execute()
</span><span style="color: #008080;">40</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">41</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> do something heavy</span>
<span style="color: #008080;">42</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">43</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>这样，我们在测试 MyClass 类时，就可以通过 IJob 接口注入 Mock 对象。这里选用的 Mocking Library 是 NSubstitute，参考《<a href="http://www.cnblogs.com/gaochundong/archive/2013/05/22/nsubstitute_manual.html" target="_blank">NSubstitute完全手册索引</a>》。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">  [Test]
</span><span style="color: #008080;"> 2</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Test_MyClass_ExecuteJob()
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 4</span>     IJob job = Substitute.For&lt;IJob&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     MyClass instance = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MyClass(job);
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    instance.ExecuteJob();
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> assert</span>
<span style="color: #008080;">10</span>     job.Received(<span style="color: #800080;">1</span><span style="color: #000000;">).Execute();
</span><span style="color: #008080;">11</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<h3>依赖时间的测试</h3>
<p>还有一种较难测试的代码是依赖于时间的代码。比如，我们有一个依赖于时间的 Trigger 类，简写为这个样子。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Trigger
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Trigger(DateTime triggeredTime)
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span>       <span style="color: #0000ff;">this</span>.TriggeredTime =<span style="color: #000000;"> triggeredTime;
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> DateTime TriggeredTime { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span><span style="color: #000000;"> TryExecute()
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">12</span>       <span style="color: #0000ff;">if</span> (DateTime.Now &gt;=<span style="color: #000000;"> TriggeredTime)
</span><span style="color: #008080;">13</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">14</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> do something</span>
<span style="color: #008080;">15</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">16</span> <span style="color: #000000;">      }
</span><span style="color: #008080;">17</span> 
<span style="color: #008080;">18</span>       <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>测试时，我可能会挑一些特定时间进行测试，特定时间有可能在很远的未来。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">  [Test]
</span><span style="color: #008080;"> 2</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Test_Trigger_TryExecute_AfterTriggeredTime()
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 4</span>     DateTime triggeredTimeInFuture = 
<span style="color: #008080;"> 5</span>       <span style="color: #0000ff;">new</span> DateTime(<span style="color: #800080;">2016</span>, <span style="color: #800080;">2</span>, <span style="color: #800080;">29</span>, <span style="color: #800080;">8</span>, <span style="color: #800080;">0</span>, <span style="color: #800080;">0</span><span style="color: #000000;">, DateTimeKind.Local);
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span>     Trigger trigger = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Trigger(triggeredTimeInFuture);
</span><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">bool</span> result =<span style="color: #000000;"> trigger.TryExecute();
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> assert</span>
<span style="color: #008080;">11</span> <span style="color: #000000;">    Assert.IsTrue(result);
</span><span style="color: #008080;">12</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>好吧，这个 TestCase 应该是到 2016 年才能执行成功，显然不是我们期待的。改进的办法还是增加中间层，增加 IClock 接口用于提供时间。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Trigger
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> IClock _clock;
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Trigger(IClock clock, DateTime triggeredTime)
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 7</span>       _clock =<span style="color: #000000;"> clock;
</span><span style="color: #008080;"> 8</span>       <span style="color: #0000ff;">this</span>.TriggeredTime =<span style="color: #000000;"> triggeredTime;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span> DateTime TriggeredTime { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span><span style="color: #000000;"> TryExecute()
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">15</span>       <span style="color: #0000ff;">if</span> (_clock.Now() &gt;=<span style="color: #000000;"> TriggeredTime)
</span><span style="color: #008080;">16</span> <span style="color: #000000;">      {
</span><span style="color: #008080;">17</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> do something</span>
<span style="color: #008080;">18</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">      }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>       <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;
</span><span style="color: #008080;">22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">23</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> IClock
</span><span style="color: #008080;">26</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">27</span>     Func&lt;DateTimeOffset&gt; UtcNow { <span style="color: #0000ff;">get</span><span style="color: #000000;">; }
</span><span style="color: #008080;">28</span>     Func&lt;DateTimeOffset&gt; Now { <span style="color: #0000ff;">get</span><span style="color: #000000;">; }
</span><span style="color: #008080;">29</span> <span style="color: #000000;">  }
</span><span style="color: #008080;">30</span> 
<span style="color: #008080;">31</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Clock : IClock
</span><span style="color: #008080;">32</span> <span style="color: #000000;">  {
</span><span style="color: #008080;">33</span>     <span style="color: #0000ff;">public</span> Func&lt;DateTimeOffset&gt; UtcNow { <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> () =&gt;<span style="color: #000000;"> DateTimeOffset.UtcNow; } }
</span><span style="color: #008080;">34</span>     <span style="color: #0000ff;">public</span> Func&lt;DateTimeOffset&gt; Now { <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> () =&gt;<span style="color: #000000;"> DateTimeOffset.Now; } }
</span><span style="color: #008080;">35</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p>这样，我们就可以在 TestCase 代码中使用 Mocking 类库来替换 IClock 的实例，进而指定时间。</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">  [Test]
</span><span style="color: #008080;"> 2</span>   <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Test_Trigger_TryExecute_AfterTriggeredTime()
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">  {
</span><span style="color: #008080;"> 4</span>     IClock clock = Substitute.For&lt;IClock&gt;<span style="color: #000000;">();
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span> <span style="color: #000000;">    clock.Now
</span><span style="color: #008080;"> 7</span>       .Returns&lt;Func&lt;DateTimeOffset&gt;&gt;(() =&gt;
<span style="color: #008080;"> 8</span> <span style="color: #000000;">      {
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> DateTimeOffset.Parse(
</span><span style="color: #008080;">10</span>           <span style="color: #800000;">"</span><span style="color: #800000;">2016-02-29T08:00:01.0000000</span><span style="color: #800000;">"</span><span style="color: #000000;">, CultureInfo.CurrentCulture);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">      });
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>     DateTime triggeredTimeInFuture =
<span style="color: #008080;">14</span>       <span style="color: #0000ff;">new</span> DateTime(<span style="color: #800080;">2016</span>, <span style="color: #800080;">2</span>, <span style="color: #800080;">29</span>, <span style="color: #800080;">8</span>, <span style="color: #800080;">0</span>, <span style="color: #800080;">0</span><span style="color: #000000;">, DateTimeKind.Local);
</span><span style="color: #008080;">15</span> 
<span style="color: #008080;">16</span>     Trigger trigger = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Trigger(clock, triggeredTimeInFuture);
</span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">bool</span> result =<span style="color: #000000;"> trigger.TryExecute();
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> assert</span>
<span style="color: #008080;">20</span> <span style="color: #000000;">    Assert.IsTrue(result);
</span><span style="color: #008080;">21</span>   }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><strong>本篇文章《<a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" target="_blank">代码的印象派</a>》由&nbsp;<a href="http://www.cnblogs.com/gaochundong/">Dennis Gao</a>&nbsp;原创发表自<a href="http://www.cnblogs.com/" target="_blank">博客园</a>个人博客，未经作者本人同意禁止以任何的形式转载，任何自动的或人为的爬虫转载行为均为耍流氓。</strong></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag">标签: <a href="http://www.cnblogs.com/gaochundong/tag/C%23/">C#</a>, <a href="http://www.cnblogs.com/gaochundong/tag/Unit%20Testing/">Unit Testing</a>, <a href="http://www.cnblogs.com/gaochundong/tag/NSubstitute/">NSubstitute</a>, <a href="http://www.cnblogs.com/gaochundong/tag/TDD/">TDD</a>, <a href="http://www.cnblogs.com/gaochundong/tag/Quality/">Quality</a>, <a href="http://www.cnblogs.com/gaochundong/tag/OOD/">OOD</a>, <a href="http://www.cnblogs.com/gaochundong/tag/Coding%20Standards/">Coding Standards</a></div>
<div id="blog_post_info"><div id="green_channel">
绿色通道：
<a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(4433158,cb_blogId,1);green_channel_success(this,'谢谢推荐！');">好文要顶</a>
<a id="green_channel_follow" onclick="c_follow();" href="javascript:void(0);">关注我</a>
<a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a><a id="green_channel_contact" href="http://msg.cnblogs.com/send/Dennis%20Gao" target="_blank">与我联系</a>
<a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/icon_weibo_24.png" alt=""></a>
</div>
<div id="author_profile">
<div id="author_profile_info" class="author_profile_info">
<a href="http://home.cnblogs.com/u/gaochundong/" target="_blank"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png" class="author_avatar" alt=""></a>
<div id="author_profile_detail" class="author_profile_info">
<a href="http://home.cnblogs.com/u/gaochundong/">Dennis Gao</a><br>
<a href="http://home.cnblogs.com/u/gaochundong/followees">关注 - 40</a><br>
<a href="http://home.cnblogs.com/u/gaochundong/followers">粉丝 - 1312</a>
</div>
</div>
<div class="clear"></div>
<div id="author_profile_honor">荣誉：<a href="http://www.cnblogs.com/expert/" target="_blank">推荐博客</a></div>
<div id="author_profile_follow">
    <a href="javascript:void(0);" onclick="c_follow();return false;">+加关注</a>
</div>
</div>
<div id="div_digg"><div id="follow_me" style="padding-bottom: 5px"><a id="follow_me_dennis" onclick="follow_me();" href="javascript:void(0);" style="font-weight: bold; padding-left:5px;">+加关注</a></div>										
    <div class="diggit" onclick="votePost(4433158,'Digg')">
        <span class="diggnum" id="digg_count">133</span>
    </div>
	<div class="buryit" onclick="votePost(4433158,'Bury')"> 
		<span class="burynum" id="bury_count">3</span>
	</div>
	<div class="clear"></div>	
	<div class="diggword" id="digg_tips">
    (请您对文章做出评价)
    </div>	
<div id="goto_page_top" style="padding-top: 5px"><a onclick="javascript:goto_comment();" href="javascript:void(0);" style="font-weight: bold; padding-left: 5px;">快速评论</a>&nbsp;&nbsp;<a href="#top" style="font-weight: bold; padding-left: 5px;">返回顶部</a></div></div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/gaochundong/p/kmeans_clustering.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/gaochundong/p/kmeans_clustering.html" title="发布于2015-02-09 23:06">K-Means 聚类算法</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2015-05-04 16:22</span> <a href="http://www.cnblogs.com/gaochundong/">Dennis Gao</a> 阅读(<span id="post_view_count">10303</span>) 评论(<span id="post_comment_count">86</span>)  <a href="http://i.cnblogs.com/EditPosts.aspx?postid=4433158" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(4433158);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=true,cb_blogId=77744,cb_entryId=4433158,cb_blogApp=currentBlogApp,cb_blogUserGuid='01e7fb75-bbe0-df11-ac81-842b2b196315',cb_entryCreatedDate='2015/5/4 16:22:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"><div id="comments_pager_top"><div class="pager"><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">&lt; Prev</a><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">1</a><span class="current">2</span></div></div>
<br>
<div class="feedback_area_title">评论列表</div>
<div class="feedbackNoItems"></div>	

		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3176645,'ObejWw/e/q847biBvoGTiDRb6xxamaZqIfVkCT0bEuf1SxLb5xNCgQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3176645,'ObejWw/e/q847biBvoGTiDRb6xxamaZqIfVkCT0bEuf1SxLb5xNCgQ==')">引用</a></span>
				</div>
				<a href="#3176645" class="layer">#51楼</a><a name="3176645" id="comment_anchor_3176645"></a>  <span class="comment_date">2015-05-05 18:32</span> <a id="a_comment_author_3176645" href="http://www.cnblogs.com/netfocus/" target="_blank">netfocus</a> <a href="http://msg.cnblogs.com/send/netfocus" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3176645" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>写的很好，很有共鸣。</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20150126002828.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3176645,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3176645,'Bury',this)">反对(0)</a></div><span id="comment_3176645_avatar" style="display:none;">http://pic.cnblogs.com/face/13665/20150126002828.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3176782,'4cSClyE4Z6kwNllN6UYZQAuSzhXIet9CpCcqTJYsSIRKVf8yi4eu0w==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3176782,'4cSClyE4Z6kwNllN6UYZQAuSzhXIet9CpCcqTJYsSIRKVf8yi4eu0w==')">引用</a></span>
				</div>
				<a href="#3176782" class="layer">#52楼</a><a name="3176782" id="comment_anchor_3176782"></a>  <span class="comment_date">2015-05-05 23:14</span> <a id="a_comment_author_3176782" href="http://www.cnblogs.com/xishuai/" target="_blank">田园里的蟋蟀</a> <a href="http://msg.cnblogs.com/send/%E7%94%B0%E5%9B%AD%E9%87%8C%E7%9A%84%E8%9F%8B%E8%9F%80" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3176782" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>很不错！</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130715165802.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3176782,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3176782,'Bury',this)">反对(0)</a></div><span id="comment_3176782_avatar" style="display:none;">http://pic.cnblogs.com/face/435188/20130715165802.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3176912,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3176912,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3176912" class="layer">#53楼</a><a name="3176912" id="comment_anchor_3176912"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 09:27</span> <a id="a_comment_author_3176912" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3176912" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3176348" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3176348);">@</a>crazyair<br>@蝼蚁<br>@倚天照海- -<br>感谢各位的支持~~</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3176912,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3176912,'Bury',this)">反对(0)</a></div><span id="comment_3176912_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3176914,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3176914,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3176914" class="layer">#54楼</a><a name="3176914" id="comment_anchor_3176914"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 09:27</span> <a id="a_comment_author_3176914" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3176914" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3176645" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3176645);">@</a>netfocus<br>@田园里的蟋蟀<br>感谢支持，能有所共鸣更好~~</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3176914,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3176914,'Bury',this)">反对(0)</a></div><span id="comment_3176914_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3176953,'Ma0WKUFVrhfF8q7h9e9B9BSHHKIZ2pyS7+kJsZ5bcMbJKK8cB3M2cg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3176953,'Ma0WKUFVrhfF8q7h9e9B9BSHHKIZ2pyS7+kJsZ5bcMbJKK8cB3M2cg==')">引用</a></span>
				</div>
				<a href="#3176953" class="layer">#55楼</a><a name="3176953" id="comment_anchor_3176953"></a>  <span class="comment_date">2015-05-06 09:56</span> <a id="a_comment_author_3176953" href="http://www.cnblogs.com/microtry/" target="_blank">microtry</a> <a href="http://msg.cnblogs.com/send/microtry" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3176953" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3175745" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3175745);">@</a>ChuckLu<br></p><fieldset class="comment_quote"><legend><a href="#3175745" title="查看引用原文">引用</a></legend><br>我想知道这2种写法有什么区别？<br>前提是Number属性的get和set，仅仅是return和赋值，不涉及到逻辑的。<br><br>我会觉得第一种写法更简单。第二种方法，在get和set没有额外的逻辑处理的时候，感觉太臃肿了。字段少的时候，还可以接受，但是字段多了，每个字段都弄一个属性的话，太麻烦了吧</fieldset><br>我的回复只针对C#:<br>1.微软明确表示:当class内部完全不依赖于字段时,可以直接字段公开,而没有必要属性,但是这样做并不能获得额外的性能优势<br>2.属性访问器会自动生成get_属性名()和set_属性名()两个函数,<br>使用过C++或者JS等早期OOPL的人大概都有这样的经历,要写很多的get/set,属性访问器只不过是语法糖而已,<br>当你确定绝不可能set/get隔离的时候,那就不隔离呗,<br>而另一种情况是当get/set的逻辑比较复杂的时候,还不如自己写get/set,更加方便<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u144836.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3176953,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3176953,'Bury',this)">反对(0)</a></div><span id="comment_3176953_avatar" style="display:none;">http://pic.cnblogs.com/face/u144836.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177018,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177018,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">引用</a></span>
				</div>
				<a href="#3177018" class="layer">#56楼</a><a name="3177018" id="comment_anchor_3177018"></a>  <span class="comment_date">2015-05-06 10:29</span> <a id="a_comment_author_3177018" href="http://www.cnblogs.com/chucklu/" target="_blank">ChuckLu</a> <a href="http://msg.cnblogs.com/send/ChuckLu" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177018" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3176953" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3176953);">@</a>microtry<br></p><fieldset class="comment_quote"><legend><a href="#3176953" title="查看引用原文">引用</a></legend>    @ChuckLu<br><fieldset class="comment_quote"><legend>引用</legend>引用<br>我想知道这2种写法有什么区别？<br>前提是Number属性的get和set，仅仅是return和赋值，不涉及到逻辑的。<br><br>我会觉得第一种写法更简单。第二种方法，在get和set没有额外的逻辑处理的时候，感觉太臃肿了。字段少的时候，还可以接受，但是字段多了，每个字段都弄一个属性的话，太麻烦了吧</fieldset><br>我的回复只针对C#:<br>1.微软明确表示:当class内部完全不依赖于字段时,可以直接字段公开,而没有必要属性,但是这样做并不能获得额外的性能优势<br>2.属性访问器会自动生成get_属性名()和set_属性名()两个函数,<br>使用过C++或者JS等早期O...</fieldset><br>额，第一点能理解，不指望性能优势，只是希望简化编码。因为在字段很多，比如10个字段，如果不public的话。每个字段加属性，还要get和set。太麻烦了。[当然前提还是根本没有get和set的逻辑]<br>get和set逻辑复杂的时候？我不是很理解。<br>我如果需要用get和set的话，必然是需要自己写逻辑的。<br>不会傻瓜式的<br>get{return 字段;}<br>set{字段 = value;}<br>如果不涉及逻辑，单纯写这个，貌似太傻瓜了。<br><br>记得现在的编译器，可以简写的直接 get;set;就可以<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140721144551.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177018,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177018,'Bury',this)">反对(0)</a></div><span id="comment_3177018_avatar" style="display:none;">http://pic.cnblogs.com/face/470550/20140721144551.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177024,'qkrGjte7js/HE+y3tPQJvjHXYxuCHkNLEq/R/zEgcuOTaNSxwuLyMQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177024,'qkrGjte7js/HE+y3tPQJvjHXYxuCHkNLEq/R/zEgcuOTaNSxwuLyMQ==')">引用</a></span>
				</div>
				<a href="#3177024" class="layer">#57楼</a><a name="3177024" id="comment_anchor_3177024"></a>  <span class="comment_date">2015-05-06 10:34</span> <a id="a_comment_author_3177024" href="http://www.cnblogs.com/farrio/" target="_blank">妖居</a> <a href="http://msg.cnblogs.com/send/%E5%A6%96%E5%B1%85" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177024" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>我好像看到你们新的job manager的代码</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u6863.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177024,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177024,'Bury',this)">反对(0)</a></div><span id="comment_3177024_avatar" style="display:none;">http://pic.cnblogs.com/face/u6863.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177039,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177039,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3177039" class="layer">#58楼</a><a name="3177039" id="comment_anchor_3177039"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 10:44</span> <a id="a_comment_author_3177039" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177039" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177024" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177024);">@</a>妖居<br></p><fieldset class="comment_quote"><legend><a href="#3177024" title="查看引用原文">引用</a></legend>    我好像看到你们新的job manager的代码       </fieldset><br>对啊，文章本身就是实战出来的，我们在实现新的 Job Scheduler 时遇到了不少问题。<br>咱不带这么爆料自黑的哦~~ 我们写的很好的，哈哈哈~~~<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177039,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177039,'Bury',this)">反对(0)</a></div><span id="comment_3177039_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177048,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177048,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3177048" class="layer">#59楼</a><a name="3177048" id="comment_anchor_3177048"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 10:48</span> <a id="a_comment_author_3177048" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177048" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177024" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177024);">@</a>妖居<br></p><fieldset class="comment_quote"><legend><a href="#3177024" title="查看引用原文">引用</a></legend>    我好像看到你们新的job manager的代码       </fieldset><br>园龄：10年1个月<br>哥，别吓我，您老是特意上来为我捧场的吗~~<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177048,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177048,'Bury',this)">反对(0)</a></div><span id="comment_3177048_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177070,'Pd+QW8IvBoNLNYMTSj7l6znuohICVdXVcA7KrPtpHFpfU1zsoLPwAA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177070,'Pd+QW8IvBoNLNYMTSj7l6znuohICVdXVcA7KrPtpHFpfU1zsoLPwAA==')">引用</a></span>
				</div>
				<a href="#3177070" class="layer">#60楼</a><a name="3177070" id="comment_anchor_3177070"></a>  <span class="comment_date">2015-05-06 11:06</span> <a id="a_comment_author_3177070" href="http://www.cnblogs.com/jiangdaoli/" target="_blank">火星老蒋</a> <a href="http://msg.cnblogs.com/send/%E7%81%AB%E6%98%9F%E8%80%81%E8%92%8B" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177070" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177018" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177018);">@</a>ChuckLu<br>简化输入的话，在vs中prop+tab，基本上敲击键盘次数与public xxx yyyy比起来是差不多的，甚至前者更有一种因莫名节奏而带来的输入畅快感；<br><br>另外还有一个小的不值得一提的事，由于属性实际被编译为get和set方法，作为类库对外暴露的接口是可替换的，比如原来你的类库A里有个<br>public class A<br>{<br>    public int Threshold;<br>    public void Run()<br>    {<br>    }<br>}<br><br>调用的项目BCDEF...Z代码是：<br>var a = new A();<br>a.Threshold= 50000;<br>a.Run();<br>...<br>var a = new A();<br>a.Threshold= 50;<br>a.Run();<br><br>那么一旦Threshold由于某些不可预料的问题必须改为属性的时候，比如以下方式：<br><br>private int _threshold;<br>public int Threshold<br>{<br>	get<br>	{<br>		return _threshold;<br>	}<br>	set<br>	{<br>		_threshold = value &gt; 1000 ? value : 1000;<br>	}<br>}<br><br>所有客户端项目BCDEF...Z都是必须重新编译的。<br><br>反之如果一开始该字段就是属性，那么无论get set怎么改实现，至少直接替换dll是可以跑起来的。</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u117761.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177070,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177070,'Bury',this)">反对(0)</a></div><span id="comment_3177070_avatar" style="display:none;">http://pic.cnblogs.com/face/u117761.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177166,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177166,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">引用</a></span>
				</div>
				<a href="#3177166" class="layer">#61楼</a><a name="3177166" id="comment_anchor_3177166"></a>  <span class="comment_date">2015-05-06 13:11</span> <a id="a_comment_author_3177166" href="http://www.cnblogs.com/chucklu/" target="_blank">ChuckLu</a> <a href="http://msg.cnblogs.com/send/ChuckLu" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177166" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177070" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177070);">@</a>火星老蒋<br></p><fieldset class="comment_quote"><legend><a href="#3177070" title="查看引用原文">引用</a></legend>    @ChuckLu<br>简化输入的话，在vs中prop+tab，基本上敲击键盘次数与public xxx yyyy比起来是差不多的，甚至前者更有一种因莫名节奏而带来的输入畅快感；<br><br>另外还有一个小的不值得一提的事，由于属性实际被编译为get和set方法，作为类库对外暴露的接口是可替换的，比如原来你的类库A里有个<br>public class A<br>{<br>    public int Threshold;<br>    public void Run()<br>    {<br>    }<br>}<br><br>调用的项目BCDEF...Z代码是：<br>var a = new A();<br>a.Threshold= 50000;<br>a.Run(...</fieldset><br>我说的是确保不会有get和set的扩展，这个是前提。<br><br>另外，就你说的情况。看不出字段替换dll为什么不能跑起来。<br>class A<br>{<br> public int Number;<br>}<br>class A<br>{<br>private int number;<br>public int Number<br>{<br>get;<br>set;<br>}<br>}<br>这2中写法，一个是字段，一个是属性。即便是你从第一种方式，改变成第二种方式。<br>对于调用方来说，是没有区别的。<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140721144551.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177166,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177166,'Bury',this)">反对(0)</a></div><span id="comment_3177166_avatar" style="display:none;">http://pic.cnblogs.com/face/470550/20140721144551.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177189,'1zI+kugWx9VP4au9Sk2VUlDQh9Rz2YCNAQc/4+F0I9NHNw2wXIDdeg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177189,'1zI+kugWx9VP4au9Sk2VUlDQh9Rz2YCNAQc/4+F0I9NHNw2wXIDdeg==')">引用</a></span>
				</div>
				<a href="#3177189" class="layer">#62楼</a><a name="3177189" id="comment_anchor_3177189"></a>  <span class="comment_date">2015-05-06 13:28</span> <a id="a_comment_author_3177189" href="http://home.cnblogs.com/u/153546/" target="_blank">wdwwtzy</a> <a href="http://msg.cnblogs.com/send/wdwwtzy" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177189" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>我好像看到你们新的job manager的代码</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar8.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177189,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177189,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177215,'Pd+QW8IvBoNLNYMTSj7l6znuohICVdXVcA7KrPtpHFpfU1zsoLPwAA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177215,'Pd+QW8IvBoNLNYMTSj7l6znuohICVdXVcA7KrPtpHFpfU1zsoLPwAA==')">引用</a></span>
				</div>
				<a href="#3177215" class="layer">#63楼</a><a name="3177215" id="comment_anchor_3177215"></a>  <span class="comment_date">2015-05-06 14:01</span> <a id="a_comment_author_3177215" href="http://www.cnblogs.com/jiangdaoli/" target="_blank">火星老蒋</a> <a href="http://msg.cnblogs.com/send/%E7%81%AB%E6%98%9F%E8%80%81%E8%92%8B" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177215" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177166" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177166);">@</a>ChuckLu<br>第一点咱们没法预测未来不是吗，所有的public字段都要考虑一下是否以后有可能修改才选用Property或者Field不是太累了吗？<br>第二点看不出来的话新建几个项目试试就知道了，MissingFieldException。</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u117761.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177215,'Digg',this)">支持(1)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177215,'Bury',this)">反对(0)</a></div><span id="comment_3177215_avatar" style="display:none;">http://pic.cnblogs.com/face/u117761.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177233,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177233,'OBHiEBAbzkIplOAbJs9HfGmhKb7AjduLp2P1vb4r6Em9tBMip1ZrFw==')">引用</a></span>
				</div>
				<a href="#3177233" class="layer">#64楼</a><a name="3177233" id="comment_anchor_3177233"></a>  <span class="comment_date">2015-05-06 14:22</span> <a id="a_comment_author_3177233" href="http://www.cnblogs.com/chucklu/" target="_blank">ChuckLu</a> <a href="http://msg.cnblogs.com/send/ChuckLu" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177233" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177215" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177215);">@</a>火星老蒋<br></p><fieldset class="comment_quote"><legend><a href="#3177215" title="查看引用原文">引用</a></legend>    @ChuckLu<br>第一点咱们没法预测未来不是吗，所有的public字段都要考虑一下是否以后有可能修改才选用Property或者Field不是太累了吗？<br>第二点看不出来的话新建几个项目试试就知道了，MissingFieldException。       </fieldset><br>ok，我测试了下，确实会有字段缺少的异常。<br>在不考虑扩展的情况下，完全没必要加属性的，直接写字段就ok了。<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140721144551.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177233,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177233,'Bury',this)">反对(0)</a></div><span id="comment_3177233_avatar" style="display:none;">http://pic.cnblogs.com/face/470550/20140721144551.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177241,'XOGPHJ/dLH4QTF1ZkySLkg3kFhoxorszPQA/fZEtawLGU44ZtfuXtg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177241,'XOGPHJ/dLH4QTF1ZkySLkg3kFhoxorszPQA/fZEtawLGU44ZtfuXtg==')">引用</a></span>
				</div>
				<a href="#3177241" class="layer">#65楼</a><a name="3177241" id="comment_anchor_3177241"></a>  <span class="comment_date">2015-05-06 14:31</span> <a id="a_comment_author_3177241" href="http://www.cnblogs.com/shenyun/" target="_blank">沈赟</a> <a href="http://msg.cnblogs.com/send/%E6%B2%88%E8%B5%9F" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177241" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>thanks</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u30988.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177241,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177241,'Bury',this)">反对(0)</a></div><span id="comment_3177241_avatar" style="display:none;">http://pic.cnblogs.com/face/u30988.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177375,'heU/xS6szeckvlFZVXSMLYdEgvuDdhXLgdzVeSPFw1imfM72uS8V/w==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177375,'heU/xS6szeckvlFZVXSMLYdEgvuDdhXLgdzVeSPFw1imfM72uS8V/w==')">引用</a></span>
				</div>
				<a href="#3177375" class="layer">#66楼</a><a name="3177375" id="comment_anchor_3177375"></a>  <span class="comment_date">2015-05-06 16:28</span> <a id="a_comment_author_3177375" href="http://www.cnblogs.com/xxyan/" target="_blank">AK47</a> <a href="http://msg.cnblogs.com/send/AK47" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177375" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>博主的总结，深有感触</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar1.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177375,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177375,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177392,'W5cN1rUmbgwUHZxodeEIf3dX1EwJ+dEBf87JehGzH0kuTbPOHzXGEA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177392,'W5cN1rUmbgwUHZxodeEIf3dX1EwJ+dEBf87JehGzH0kuTbPOHzXGEA==')">引用</a></span>
				</div>
				<a href="#3177392" class="layer">#67楼</a><a name="3177392" id="comment_anchor_3177392"></a>  <span class="comment_date">2015-05-06 16:43</span> <a id="a_comment_author_3177392" href="http://www.cnblogs.com/uncleJOKER/" target="_blank">张小驴同学</a> <a href="http://msg.cnblogs.com/send/%E5%BC%A0%E5%B0%8F%E9%A9%B4%E5%90%8C%E5%AD%A6" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177392" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>点个赞</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140614174744.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177392,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177392,'Bury',this)">反对(0)</a></div><span id="comment_3177392_avatar" style="display:none;">http://pic.cnblogs.com/face/314632/20140614174744.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177393,'ZpAEADjhlVHfdmgK2n8pe2JypQwSEw0fqEQkMMkd1AZnNLI2W4noTQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177393,'ZpAEADjhlVHfdmgK2n8pe2JypQwSEw0fqEQkMMkd1AZnNLI2W4noTQ==')">引用</a></span>
				</div>
				<a href="#3177393" class="layer">#68楼</a><a name="3177393" id="comment_anchor_3177393"></a>  <span class="comment_date">2015-05-06 16:43</span> <a id="a_comment_author_3177393" href="http://www.cnblogs.com/chongsha/" target="_blank">冲杀</a> <a href="http://msg.cnblogs.com/send/%E5%86%B2%E6%9D%80" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177393" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3176226" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3176226);">@</a>天罡<br></p><fieldset class="comment_quote"><legend><a href="#3176226" title="查看引用原文">引用</a></legend>博主，我是第一个点推荐的，这篇上了最多推荐&amp;&amp;有这么多评论，我也想发骚一下。<br>我的感觉是，往往是最开始写架构时的代码很优秀，后来随着时间的推移，维护的人可能换过N个，各自根据各自需求与风格进行了修改，最后导致了代码的四不像。除非来个大牛做大的重构，否则只能越来越糟了。可往往大牛看着不爽就直接重写了。<br>最后，问个隐私问题。楼主是我崇拜的，我多想达到博主的高度。能告诉下您的薪资范围吗，我也好有个奋斗目标。<br>年薪：<br>A：30W-50W<br>B：50W-70W<br>C：70W-100W<br>D：100W以上</fieldset><br><br>其
实你说的优秀设计的框架，最后千疮百孔，个人总结的是：99%的程序员是以解决手上的问题为前提，也就是说，他们没只是关注东西做出来，而不是先看了当前
代码的框架设计后，才开始动手！！！！不是框架的问题。归根结底还是人的问题。有的人可以很贴切的根据当前项目的框架来写代码，但是有的人，直接横冲直
撞，选择自己会的方法去解决问题（其实很多时候是这些人理解不到设计者的意图或者本身水平就不够又或者不愿意去思考）。反正我是看透了！！！搞烂就搞烂，
只要按时交付了就OK，毕竟我不是甲方，对那些乱搞的程序员，你说了反而还得罪人！！！！因为老板只管你什么时候拿出来，至于质量，大家见过多少老板会对
代码质量关心的，见过的举手<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u320794.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177393,'Digg',this)">支持(5)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177393,'Bury',this)">反对(0)</a></div><span id="comment_3177393_avatar" style="display:none;">http://pic.cnblogs.com/face/u320794.jpg?id=18124815</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177433,'vunLrPuKIsn0uNJging6NNxg34LLnfucr6nLB6Cog1ZxwHX5VTzmXw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177433,'vunLrPuKIsn0uNJging6NNxg34LLnfucr6nLB6Cog1ZxwHX5VTzmXw==')">引用</a></span>
				</div>
				<a href="#3177433" class="layer">#69楼</a><a name="3177433" id="comment_anchor_3177433"></a>  <span class="comment_date">2015-05-06 17:21</span> <a id="a_comment_author_3177433" href="http://www.cnblogs.com/ta-wuhen/" target="_blank">ta_wuhen</a> <a href="http://msg.cnblogs.com/send/ta_wuhen" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177433" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>构造注入，参数多。有好的解决方式？</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar8.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177433,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177433,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177448,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177448,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3177448" class="layer">#70楼</a><a name="3177448" id="comment_anchor_3177448"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 17:45</span> <a id="a_comment_author_3177448" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177448" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177433" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177433);">@</a>ta_wuhen<br></p><fieldset class="comment_quote"><legend><a href="#3177433" title="查看引用原文">引用</a></legend>构造注入，参数多。有好的解决方式？</fieldset><br>我在之前的评论中提到了些解决方案。<br><br>首先，要优先选择使用构造函数注入依赖。<br><br>如果参数数量超过 4-5 个，建议考虑，是不是类设计的有问题，真的要有这么多的外部依赖吗？<br>好，考虑后发现确实需要这么多依赖，那么是否可以增加一个中间层，将这些外部依赖打包到一起呢？他们之间是否有这么的联系，在某些场景下就是一起工作的。那么你就可以简化成一个依赖。<br>好，还不行，不能打包，那解决办法就是通过引入 Factory 模式，通过将所有依赖注入到类型的工厂中，通过工厂构造对象，这样，从你的代码中将构造该对象的实例的过程隔离出去。<br><br>如何？<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177448,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177448,'Bury',this)">反对(0)</a></div><span id="comment_3177448_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177465,'3bovW97WXLmp+52a1+KsFSZxBNFgurZ1UtmwIZEyVy+J50k/dleVXA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177465,'3bovW97WXLmp+52a1+KsFSZxBNFgurZ1UtmwIZEyVy+J50k/dleVXA==')">引用</a></span>
				</div>
				<a href="#3177465" class="layer">#71楼</a><a name="3177465" id="comment_anchor_3177465"></a>  <span class="comment_date">2015-05-06 18:01</span> <a id="a_comment_author_3177465" href="http://www.cnblogs.com/shark_chen/" target="_blank">shark_c</a> <a href="http://msg.cnblogs.com/send/shark_c" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177465" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>我觉得构造函数注入不是绝对，属性注入更加灵活</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar4.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177465,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177465,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177466,'vunLrPuKIsn0uNJging6NNxg34LLnfucr6nLB6Cog1ZxwHX5VTzmXw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177466,'vunLrPuKIsn0uNJging6NNxg34LLnfucr6nLB6Cog1ZxwHX5VTzmXw==')">引用</a></span>
				</div>
				<a href="#3177466" class="layer">#72楼</a><a name="3177466" id="comment_anchor_3177466"></a>  <span class="comment_date">2015-05-06 18:02</span> <a id="a_comment_author_3177466" href="http://www.cnblogs.com/ta-wuhen/" target="_blank">ta_wuhen</a> <a href="http://msg.cnblogs.com/send/ta_wuhen" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177466" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177448" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177448);">@</a>Dennis Gao<br>嗯，我试试。3q</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar6.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177466,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177466,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177480,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177480,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3177480" class="layer">#73楼</a><a name="3177480" id="comment_anchor_3177480"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-06 18:25</span> <a id="a_comment_author_3177480" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177480" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177465" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177465);">@</a>shark_c<br></p><fieldset class="comment_quote"><legend><a href="#3177465" title="查看引用原文">引用</a></legend>    我觉得构造函数注入不是绝对，属性注入更加灵活       </fieldset><br>灵活真不好说，属性注入的要求是在类API中暴露属性，而如果注入的依赖不应当向外暴露，则直接破坏了类的设计。<br><br>一般我只会在处理循环引用问题时才使用属性注入。<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177480,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177480,'Bury',this)">反对(0)</a></div><span id="comment_3177480_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177544,'HF+qj1dcq6iSNiemcgjOzwFPfDRChbRwWJXiWDZawANiOjB7CYCrFQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177544,'HF+qj1dcq6iSNiemcgjOzwFPfDRChbRwWJXiWDZawANiOjB7CYCrFQ==')">引用</a></span>
				</div>
				<a href="#3177544" class="layer">#74楼</a><a name="3177544" id="comment_anchor_3177544"></a>  <span class="comment_date">2015-05-06 20:39</span> <a id="a_comment_author_3177544" href="http://www.cnblogs.com/viphyy/" target="_blank">前端小王子</a> <a href="http://msg.cnblogs.com/send/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%8E%8B%E5%AD%90" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177544" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>深圳JAVA技术交流群 281463795, 不错，哈哈哈哈</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140107114525.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177544,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177544,'Bury',this)">反对(0)</a></div><span id="comment_3177544_avatar" style="display:none;">http://pic.cnblogs.com/face/597389/20140107114525.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177571,'gJYilxK+40gR4pMZz+Oyxs0/yBfa3ifQi+dQtoiRNJ/9aXHiUYPOXQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177571,'gJYilxK+40gR4pMZz+Oyxs0/yBfa3ifQi+dQtoiRNJ/9aXHiUYPOXQ==')">引用</a></span>
				</div>
				<a href="#3177571" class="layer">#75楼</a><a name="3177571" id="comment_anchor_3177571"></a>  <span class="comment_date">2015-05-06 21:21</span> <a id="a_comment_author_3177571" href="http://www.cnblogs.com/weapon/" target="_blank">Adming</a> <a href="http://msg.cnblogs.com/send/Adming" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177571" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="http://images.cnitblog.com/blog2015/416441/201505/062120246572622.png" target="_blank"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/062120246572622.png" alt="" onload="javascript:if(this.width>500) this.width=500;" border="0" width="500"></a><br>我觉得这样也还可以啊！</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar4.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177571,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177571,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177603,'CQYsbqKH6Khr7lTzfHOCUXMnH4CXg/gEkkm6rp21p4+cXKkA1lLN7A==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177603,'CQYsbqKH6Khr7lTzfHOCUXMnH4CXg/gEkkm6rp21p4+cXKkA1lLN7A==')">引用</a></span>
				</div>
				<a href="#3177603" class="layer">#76楼</a><a name="3177603" id="comment_anchor_3177603"></a>  <span class="comment_date">2015-05-06 22:40</span> <a id="a_comment_author_3177603" href="http://www.cnblogs.com/marvin/" target="_blank">马非码</a> <a href="http://msg.cnblogs.com/send/%E9%A9%AC%E9%9D%9E%E7%A0%81" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177603" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>总结得不错，即使是C#，不同类型的变量加个前缀还是很有必要的，当你的代码复杂了，能一眼就看到不同的信息，而不是鼠标放上去才知道，会省事很多</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20141127002958.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177603,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177603,'Bury',this)">反对(0)</a></div><span id="comment_3177603_avatar" style="display:none;">http://pic.cnblogs.com/face/66456/20141127002958.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177679,'4f6XRuMtwqIZx9rHKNwVObk9b7mN0e4w5wr+OBEC4n5z0bEkuoRfHQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177679,'4f6XRuMtwqIZx9rHKNwVObk9b7mN0e4w5wr+OBEC4n5z0bEkuoRfHQ==')">引用</a></span>
				</div>
				<a href="#3177679" class="layer">#77楼</a><a name="3177679" id="comment_anchor_3177679"></a>  <span class="comment_date">2015-05-07 08:50</span> <a id="a_comment_author_3177679" href="http://www.cnblogs.com/xiadao521/" target="_blank">何镇汐</a> <a href="http://msg.cnblogs.com/send/%E4%BD%95%E9%95%87%E6%B1%90" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177679" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>非常感谢楼主的Substitute系列，我之前一直在使用Rhino Mocks，用得非常痛苦，看了楼主的Substitute系列，果断采用，不仅测试代码更简单，而且解决了之前的很多棘手问题，比如Rhino Mocks不允许覆盖测试设置<br>楼主为.NET敏捷开发贡献卓越</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20150428170209.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177679,'Digg',this)">支持(1)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177679,'Bury',this)">反对(0)</a></div><span id="comment_3177679_avatar" style="display:none;">http://pic.cnblogs.com/face/41709/20150428170209.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3177940,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3177940,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3177940" class="layer">#78楼</a><a name="3177940" id="comment_anchor_3177940"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-07 11:22</span> <a id="a_comment_author_3177940" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3177940" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177679" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177679);">@</a>何镇汐<br></p><fieldset class="comment_quote"><legend><a href="#3177679" title="查看引用原文">引用</a></legend>非常感谢楼主的Substitute系列，我之前一直在使用Rhino Mocks，用得非常痛苦，看了楼主的Substitute系列，果断采用，不仅测试代码更简单，而且解决了之前的很多棘手问题，比如Rhino Mocks不允许覆盖测试设置<br>楼主为.NET敏捷开发贡献卓越</fieldset><br>为识货者点赞！<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3177940,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3177940,'Bury',this)">反对(0)</a></div><span id="comment_3177940_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3178037,'HF+qj1dcq6iSNiemcgjOzwFPfDRChbRwWJXiWDZawANiOjB7CYCrFQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3178037,'HF+qj1dcq6iSNiemcgjOzwFPfDRChbRwWJXiWDZawANiOjB7CYCrFQ==')">引用</a></span>
				</div>
				<a href="#3178037" class="layer">#79楼</a><a name="3178037" id="comment_anchor_3178037"></a>  <span class="comment_date">2015-05-07 13:44</span> <a id="a_comment_author_3178037" href="http://www.cnblogs.com/viphyy/" target="_blank">前端小王子</a> <a href="http://msg.cnblogs.com/send/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%8E%8B%E5%AD%90" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3178037" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>java技术群281463795， 大神解决开发问题，不错，哈哈哈哈</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20140107114525.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3178037,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3178037,'Bury',this)">反对(0)</a></div><span id="comment_3178037_avatar" style="display:none;">http://pic.cnblogs.com/face/597389/20140107114525.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3178397,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3178397,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3178397" class="layer">#80楼</a><a name="3178397" id="comment_anchor_3178397"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-07 21:28</span> <a id="a_comment_author_3178397" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3178397" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177571" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177571);">@</a>Adming<br>这写的还真整齐，也可以赞了~</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3178397,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3178397,'Bury',this)">反对(0)</a></div><span id="comment_3178397_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3181769,'qe2sHa8LQkxypRW569b6Ot+LWZgsX/C2dzFS/uucWJFgtYdwvqrkGQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3181769,'qe2sHa8LQkxypRW569b6Ot+LWZgsX/C2dzFS/uucWJFgtYdwvqrkGQ==')">引用</a></span>
				</div>
				<a href="#3181769" class="layer">#81楼</a><a name="3181769" id="comment_anchor_3181769"></a>  <span class="comment_date">2015-05-12 14:11</span> <a id="a_comment_author_3181769" href="http://www.cnblogs.com/xumenger/" target="_blank">xumenger</a> <a href="http://msg.cnblogs.com/send/xumenger" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3181769" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>本
人大学生，最近在开发一个项目，也知道需要考虑异常处理、考虑项目的健壮性，但是因为经验较少，所以虽然在开发的过程中一直在注意这些问题、也通过一些途
径去尽可能的了解应该怎么规范的开发。结果最后开发出来的项目虽然可以实现需求中的功能，但是明显感觉有太多的漏洞、不足。所以我对这件事情真的很困惑</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20150307085723.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3181769,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3181769,'Bury',this)">反对(0)</a></div><span id="comment_3181769_avatar" style="display:none;">http://pic.cnblogs.com/face/711741/20150307085723.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3181812,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3181812,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3181812" class="layer">#82楼</a><a name="3181812" id="comment_anchor_3181812"></a>[<span class="louzhu">楼主</span>]  <span class="comment_date">2015-05-12 14:39</span> <a id="a_comment_author_3181812" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3181812" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3181769" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3181769);">@</a>xumenger<br></p><fieldset class="comment_quote"><legend><a href="#3181769" title="查看引用原文">引用</a></legend>
    
本人大学生，最近在开发一个项目，也知道需要考虑异常处理、考虑项目的健壮性，但是因为经验较少，所以虽然在开发的过程中一直在注意这些问题、也通过一些
途径去尽可能的了解应该怎么规范的开发。结果最后开发出来的项目虽然可以实现需求中的功能，但是明显感觉有太多的漏洞、不足。所以我对这件事情真的很困惑
       </fieldset><br>时间长就好了，经验和教训都是积累出来的，要不何来成长？<p></p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3181812,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3181812,'Bury',this)">反对(0)</a></div><span id="comment_3181812_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3183042,'W9VDJKyPg/Q05VjQ238cbGn/CRi7AjV0lG8KIuygzwjEHZoPl5xfMQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3183042,'W9VDJKyPg/Q05VjQ238cbGn/CRi7AjV0lG8KIuygzwjEHZoPl5xfMQ==')">引用</a></span>
				</div>
				<a href="#3183042" class="layer">#83楼</a><a name="3183042" id="comment_anchor_3183042"></a>  <span class="comment_date">2015-05-13 17:11</span> <a id="a_comment_author_3183042" href="http://www.cnblogs.com/sndnnlfhvk/" target="_blank">杨盛超</a> <a href="http://msg.cnblogs.com/send/%E6%9D%A8%E7%9B%9B%E8%B6%85" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3183042" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3177393" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3177393);">@</a>冲杀<br>这
个看公司项目性质吧，如果是给客户用的，确实BUG少就行了，至于代码质量没人关注，交付给客户不出问题就完事了。但是如果做出来是给自己公司用的产品
线，而且周期很长，经历了很多年，那就不一样了，如果代码写得很烂，后期维护及新需求开发很痛苦，这样代码质量的作用就体现出来了。一个项目做很长时间不
断改不断有新需求而项目不会发生软件危机这就体现出水平了。</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u156693.jpg"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3183042,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3183042,'Bury',this)">反对(0)</a></div><span id="comment_3183042_avatar" style="display:none;">http://pic.cnblogs.com/face/u156693.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3183346,'PWgIkzJff/Awe3OpeR0uWLjFMj5emCcMHQh3f2ZDoKPv2sKCv2v4Dg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3183346,'PWgIkzJff/Awe3OpeR0uWLjFMj5emCcMHQh3f2ZDoKPv2sKCv2v4Dg==')">引用</a></span>
				</div>
				<a href="#3183346" class="layer">#84楼</a><a name="3183346" id="comment_anchor_3183346"></a>  <span class="comment_date">2015-05-13 22:54</span> <a id="a_comment_author_3183346" href="http://www.cnblogs.com/lang1437/" target="_blank">瘸腿狼</a> <a href="http://msg.cnblogs.com/send/%E7%98%B8%E8%85%BF%E7%8B%BC" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3183346" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>DRY很重要<br>以后工作中也要注意测试代码的编写啊！</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar1.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3183346,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3183346,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3190844,'91VCTbdiQVEVqPBEZLvlcGSZtpdZ7FE+zSYOmGPnqjb7bpNs6x4JUw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3190844,'91VCTbdiQVEVqPBEZLvlcGSZtpdZ7FE+zSYOmGPnqjb7bpNs6x4JUw==')">引用</a></span>
				</div>
				<a href="#3190844" class="layer">#85楼</a><a name="3190844" id="comment_anchor_3190844"></a>  <span class="comment_date">2015-05-22 21:23</span> <a id="a_comment_author_3190844" href="http://home.cnblogs.com/u/724652/" target="_blank">ArvinZhang</a> <a href="http://msg.cnblogs.com/send/ArvinZhang" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3190844" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_commentator" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>博主写的很好。写代码一定要养成良好的风格，这个风格可以在后期的学习中不断完善。用良好的编码风格，才能有利于后期的维护，并且最好在必要的时候加上详细的注释。</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/o_commentator_identicons_default_avatar4.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3190844,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3190844,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3192989,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3192989,'L4FJhQ7PMBzd9rlNrwEnaHEcWO0JGJTLV/7y0o04UdBo1Me6UyS7gQ==')">引用</a></span>
				</div>
				<a href="#3192989" class="layer">#86楼</a><a name="3192989" id="comment_anchor_3192989"></a>[<span class="louzhu">楼主</span>]<span id="comment-maxId" style="display:none;">3192989</span><span id="comment-maxDate" style="display:none;">2015/5/25 22:40:34</span>  <span class="comment_date">2015-05-25 22:40</span> <a id="a_comment_author_3192989" href="http://www.cnblogs.com/gaochundong/" target="_blank">Dennis Gao</a> <a href="http://msg.cnblogs.com/send/Dennis%20Gao" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3192989" class="blog_comment_body"><div class="dennis_comment_list"><table class="dennis_comment_table_louzhu" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment" valign="top" align="left"><table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> <tbody><tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> <tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p><a href="#3190844" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3190844);">@</a>ArvinZhang<br>@瘸腿狼<br>@杨盛超<br><br>感谢各位的支持~~</p> </td> <td class="right"></td></tr> <tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> </tbody></table></td> <td class="dennis_comment_avatar" valign="top" align="right"><img src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20130330200353.png"></td></tr> </tbody></table> </div></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3192989,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3192989,'Bury',this)">反对(0)</a></div><span id="comment_3192989_avatar" style="display:none;">http://pic.cnblogs.com/face/175043/20130330200353.png</span>
			</div>
		</div>
	<div id="comments_pager_bottom"><div class="pager"><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">&lt; Prev</a><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">1</a><span class="current">2</span></div></div></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"><div id="commentform_title">发表评论</div>
<span id="tip_comment" style="color:Red"></span>
<p>
昵称：<input id="tbCommentAuthor" class="author" disabled="disabled" size="50" value="jtahstu" type="text">
</p>
<div class="commentbox_main">
<div class="commentbox_title">
<div class="commentbox_title_left">评论内容：</div>
<div class="commentbox_title_right">
<img id="ubb_quote" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/quote.gif" alt="引用" title="添加引用" onclick="insertUBB('tbCommentBody','quote')">
<img id="ubb_bold" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/b.png" alt="粗体" title="添加粗体" onclick="insertUBB('tbCommentBody','b')">
<img id="ubb_url" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/lk.png" alt="链接" title="添加链接" onclick="insertUbbUrl('tbCommentBody')">
<img id="ubb_indent" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/indent.png" alt="缩进" title="添加首行缩进" onclick="insertIndent('tbCommentBody')">
<img id="ubb_code" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/InsertCode.gif" alt="代码" title="添加代码" onclick="insertUbbCode()">
<img id="ubb_img" class="comment_icon" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/img.gif" alt="图片" title="上传图片" onclick="OpenImageUploadWindow();">
</div>
</div>
<div class="clear"></div>
<textarea id="tbCommentBody" class="comment_textarea" rows="20" cols="50"></textarea>
</div>
<p id="commentbox_opt">
<input id="btn_comment_submit" class="comment_btn" value="提交评论" type="button">
<span id="span_comment_canceledit" style="display:none"><a href="javascript:void(0);" onclick="return CancelCommentEdit()">不改了</a></span>
<a href="javascript:void(0);" onclick="return logout();">注销</a>
        <a id="commentbox_opt_sub" href="javascript:void(0);" title="订阅后有新评论时会邮件通知您" onclick="commentManager.Subscribe()">订阅评论</a>
</p>
<p>
[使用Ctrl+Enter键快速提交]
</p>
<div style="display:none">
<span id="comment_edit_id"></span><span id="span_parentcomment_id"></span>
<span id="span_parent_id"></span>
<span id="span_comment_replyto"></span>
<span id="span_comment_posted"></span>
</div>
</div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type="text/javascript">
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
</script>
<script type="text/javascript">
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1410860226396-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id="div-gpt-ad-1346480159711-0" style="width:300px; height:250px;">
    <script type="text/javascript">
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    </script>
    <div style="border: 0pt none;" id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__container__"><iframe src="javascript:&quot;<html><body style='background:transparent'></body></html>&quot;" style="border: 0px none; vertical-align: bottom;" marginheight="0" marginwidth="0" scrolling="no" name="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0" id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0" frameborder="0" height="250" width="300"></iframe></div><iframe src="javascript:&quot;<html><body style='background:transparent'></body></html>&quot;" style="border: 0px none; vertical-align: bottom; visibility: hidden; display: none;" marginheight="0" marginwidth="0" scrolling="no" name="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__hidden__" id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__hidden__" frameborder="0" height="0" width="0"></iframe></div>
</div>
</div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/522522/" target="_blank">不羡慕豪宅！美小伙17万美元打造树屋 竟还有WiFi</a><br> ·  <a href="http://news.cnblogs.com/n/522521/" target="_blank">Windows 10兼容性良好：完美运行Word95</a><br> ·  <a href="http://news.cnblogs.com/n/522520/" target="_blank">英公开埃博拉病毒基因测序数据</a><br> ·  <a href="http://news.cnblogs.com/n/522519/" target="_blank">微软在欧洲设立数据透明中心：向政府展示产品源代码</a><br> ·  <a href="http://news.cnblogs.com/n/522518/" target="_blank">1965-2015：NASA发布《太空漫步50年》精选图集</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="google_ad_c2" class="c_ad_block">
<div id="div-gpt-ad-1410860226396-0" style="width:468px; height:60px;">
<script type="text/javascript">
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1410860226396-0'); });
    } else {
        $('#div-gpt-ad-1346480159711-0').hide();
    }
} catch (e) { }
</script>
<div style="border: 0pt none;" id="google_ads_iframe_/1090369/cnblogs_blogpost_C2_0__container__"><iframe src="javascript:&quot;<html><body style='background:transparent'></body></html>&quot;" style="border: 0px none; vertical-align: bottom;" marginheight="0" marginwidth="0" scrolling="no" name="google_ads_iframe_/1090369/cnblogs_blogpost_C2_0" id="google_ads_iframe_/1090369/cnblogs_blogpost_C2_0" frameborder="0" height="60" width="468"></iframe></div></div>
</div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/206954/" target="_blank">那些令人喷饭的代码注释：仅以此代码献给...</a><br> ·  <a href="http://kb.cnblogs.com/page/209896/" target="_blank">给代码多留一些空间</a><br> ·  <a href="http://kb.cnblogs.com/page/522348/" target="_blank">领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处</a><br> ·  <a href="http://kb.cnblogs.com/page/517112/" target="_blank">新手学习编程的最佳方式是什么？</a><br> ·  <a href="http://kb.cnblogs.com/page/522125/" target="_blank">领域驱动设计系列（1）通过现实例子显示领域驱动设计的威力</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><!--
<div align="center">
<a href="http://www.revolvermaps.com/?target=enlarge&amp;i=1kdiyag7p8x&amp;color=54ff00&amp;m=0"><img src="//rb.revolvermaps.com/h/m/a/0/54ff00/115/10/1kdiyag7p8x.png" width="230" height="115" alt="Map" style="border:0;"></a>
</div>

<div align="center">您是本博客第 <a href="http://www.amazingcounters.com"><img border="0" src="http://cc.amazingcounters.com/counter.php?i=3161146&c=9483751" alt="AmazingCounters.com"></a> 位独立访客</div>
-->

<!--
<div id="dennis_profile" style="margin-top: 10px; margin-bottom: 10px;">
    <a href="https://www.linkedin.com/in/gaochundong" class="dennis_profile_linkedin" style="text-decoration:none; background-color: #FFFFFF;">
		<span><img src="http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_linkedin.png" width="32" height="32" style="vertical-align:middle; border-width: 0px; box-shadow: none" border="0" alt="View Dennis Gao's LinkedIn Profile"></span>
    </a>
    <a href="https://github.com/gaochundong" class="dennis_profile_github" style="text-decoration:none; background-color: #FFFFFF;">
		<span><img src="http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_github.png" width="32" height="32" style="vertical-align:middle; border-width: 0px; box-shadow: none" border="0" alt="Star Dennis Gao's GitHub Projects"></span>
    </a>
	<a href="https://twitter.com/gaochundong" class="dennis_profile_twitter" style="text-decoration:none; background-color: #FFFFFF;">
		<span><img src="http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_twitter.png" width="32" height="32" style="vertical-align:middle; border-width: 0px; box-shadow: none" border="0" alt="Follow Dennis Gao on Twitter"></span>
    </a>
    <a href="http://www.weibo.com/gaochundong" class="dennis_profile_weibo" style="text-decoration:none; background-color: #FFFFFF;">
		<span><img src="http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_weibo_logo.png" width="32" height="32" style="vertical-align:middle; border-width: 0px; box-shadow: none" border="0" alt="Follow Dennis Gao on Weibo"></span>
    </a>
    <a href="http://about.me/gaochundong" class="dennis_profile_aboutme" style="text-decoration:none; background-color: #FFFFFF;">
		<span><img src="http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_aboutme.png" width="32" height="32" style="vertical-align:middle; border-width: 0px; box-shadow: none" border="0" alt="View Dennis Gao's AboutMe Page"></span>
    </a>
</div>
-->

<!--
<div style="display: none" id="__document_write_ajax_div-1"></div><script type="text/javascript" language="javascript">window['__document_write_ajax_callbacks__']['1']();</script>
--><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/gaochundong/">Dennis Gao</a><br>园龄：<a href="http://home.cnblogs.com/u/gaochundong/" title="入园时间：2010-10-26">4年7个月</a><br>荣誉：<a href="http://www.cnblogs.com/expert/">推荐博客</a><br>粉丝：<a href="http://home.cnblogs.com/u/gaochundong/followers/">1312</a><br>关注：<a href="http://home.cnblogs.com/u/gaochundong/followees/">40</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="cnblogs.UserManager.FollowBlogger('01e7fb75-bbe0-df11-ac81-842b2b196315')">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block"></div><div id="sidebar_toptags" class="sidebar-block">
<div class="catListTag">
<h3 class="catListTitle">我的标签</h3>
<ul>
<li><a href="http://www.cnblogs.com/gaochundong/tag/C%23/">C#</a>(86)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/.NET/">.NET</a>(44)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/Design%20Pattern/">Design Pattern</a>(43)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/Algorithm/">Algorithm</a>(37)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/Unit%20Testing/">Unit Testing</a>(30)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/NSubstitute/">NSubstitute</a>(24)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/Data%20Structures/">Data Structures</a>(19)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/SQL%20Server/">SQL Server</a>(18)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/T-SQL/">T-SQL</a>(16)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/DBA/">DBA</a>(14)</li><li><a href="http://www.cnblogs.com/gaochundong/tag/">更多</a></li>
</ul>
</div></div><div id="sidebar_categories">
</div><div id="sidebar_scorerank" class="sidebar-block">
<div class="catListBlogRank">
<h3 class="catListTitle">积分与排名</h3>
<ul>
	<li class="liScore">
		积分 -	206018
	</li>
	<li class="liRank">
		排名 -	622
	</li>
</ul>
</div>


</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>

	<div id="RecentCommentsBlock"><ul>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/gaochundong/p/complexity_of_algorithms.html#3197579">1. Re:算法复杂度分析</a></li>
    <li class="recent_comment_body">Great!!!!<br>顺便向博主求一下博客的皮肤代码。嘿嘿</li>
    <li class="recent_comment_author">--impluse</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html#3192989">2. Re:代码的印象派：写点好代码吧</a></li>
    <li class="recent_comment_body">@ArvinZhang@瘸腿狼@杨盛超感谢各位的支持~~...</li>
    <li class="recent_comment_author">--Dennis Gao</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html#3190844">3. Re:代码的印象派：写点好代码吧</a></li>
    <li class="recent_comment_body">博主写的很好。写代码一定要养成良好的风格，这个风格可以在后期的学习中不断完善。用良好的编码风格，才能有利于后期的维护，并且最好在必要的时候加上详细的注释。</li>
    <li class="recent_comment_author">--ArvinZhang</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/gaochundong/archive/2013/05/09/i_am_a_bad_software_developer.html#3184774">4. Re:我是一个垃圾程序员</a></li>
    <li class="recent_comment_body">@傍晚雨@lingyu0702@superunusa@刘海川感谢评论，感谢支持~...</li>
    <li class="recent_comment_author">--Dennis Gao</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/gaochundong/archive/2013/05/09/i_am_a_bad_software_developer.html#3184706">5. Re:我是一个垃圾程序员</a></li>
    <li class="recent_comment_body">@zfylzl日，先看清楚，这是翻译文章，文中生活风格一看就是国外。...</li>
    <li class="recent_comment_author">--傍晚雨</li>
</ul>
</div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/06/03/practice_to_write_better_csharp_code.html" target="_blank" title="1. 编写更好的C#代码(17073)">1. 编写更好的C#代码 (17073)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/data_structures_and_asymptotic_analysis.html" target="_blank" title="2. 常用数据结构及复杂度(15179)">2. 常用数据结构及复杂度 (15179)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/opensource_ip_video_surveillance_system_part_1_introduction.html" target="_blank" title="3. 开源倾情奉献：基于.NET打造IP智能网络视频监控系统（一）开放源代码(14765)">3. 开源倾情奉献：基于.N...(14765)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/net4_memory_leak_of_cocurrent_queue.html" target="_blank" title="4. 那些年黑了你的微软BUG(12464)">4. 那些年黑了你的微软BUG (12464)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" target="_blank" title="5. 代码的印象派：写点好代码吧(10303)">5. 代码的印象派：写点好...(10303)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/csharp_mjpeg_streaming.html" target="_blank" title="6. C#开源实现MJPEG流传输(8173)">6. C#开源实现MJPEG流传输 (8173)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/05/09/i_am_a_bad_software_developer.html" target="_blank" title="7. 我是一个垃圾程序员(7103)">7. 我是一个垃圾程序员 (7103)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/14/csharp_async_tcp_server.html" target="_blank" title="8. C# 异步 TCP 服务器完整实现(6550)">8. C# 异步 TCP 服务器完整...(6550)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/windbg_cheat_sheet.html" target="_blank" title="9. WinDbg 命令三部曲：（一）WinDbg 命令手册(5757)">9. WinDbg 命令三部曲：（...(5757)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/11/dotnet_csharp_ip_video_surveillance.html" target="_blank" title="10. 基于.NET打造IP智能网络视频监控系统(5074)">10. 基于.NET打造IP智能网...(5074)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/opensource_ip_video_surveillance_system_part_2_foundation.html" target="_blank" title="11. 开源倾情奉献：基于.NET打造IP智能网络视频监控系统（二）基础类库介绍(4368)">11. 开源倾情奉献：基于.N...(4368)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/data_interchange_protocols.html" target="_blank" title="12. 开源跨平台数据格式化框架概览(4344)">12. 开源跨平台数据格式化...(4344)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/entity_framework_bulk_insert_extension.html" target="_blank" title="13. EntityFramework 中支持 BulkInsert 扩展(4140)">13. EntityFramework 中支...(4140)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/lambda_design_patterns.html" target="_blank" title="14. Lambda应用设计模式(4077)">14. Lambda应用设计模式 (4077)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/string_matching.html" target="_blank" title="15. 字符串匹配算法(3896)">15. 字符串匹配算法 (3896)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/14/csharp_udp_datagram_splitter.html" target="_blank" title="16. C#实现UDP分包组包(3849)">16. C#实现UDP分包组包 (3849)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/24/csharp_file_database.html" target="_blank" title="17. C#实现文件数据库(3504)">17. C#实现文件数据库 (3504)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/opensource_ip_video_surveillance_system_part_5_client_side.html" target="_blank" title="18. 开源倾情奉献：基于.NET打造IP智能网络视频监控系统（五）客户端介绍(3467)">18. 开源倾情奉献：基于.N...(3467)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/opensource_ip_video_surveillance_system_part_4_service_side.html" target="_blank" title="19. 开源倾情奉献：基于.NET打造IP智能网络视频监控系统（四）服务端介绍(3277)">19. 开源倾情奉献：基于.N...(3277)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/way_to_lambda.html" target="_blank" title="20. Lambda表达式的前世今生(3276)">20. Lambda表达式的前世今生 (3276)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/visual_studio_2013_new_feature_memory_dump_analysis.html" target="_blank" title="21. Visual Studio 2013 新功能 Memory Dump 分析器(3167)">21. Visual Studio 2013 新...(3167)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/13/csharp_rtp_rfc3550.html" target="_blank" title="22. C#实现RTP数据包传输(3162)">22. C#实现RTP数据包传输 (3162)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/18/wpf_mvvm_async_waiting_view.html" target="_blank" title="23. WPF异步MVVM等待窗体(2624)">23. WPF异步MVVM等待窗体 (2624)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/06/09/entityframework_usage_transaction_scope.html" target="_blank" title="24. EntityFramework用法探索（八）事务处理(2602)">24. EntityFramework用法探...(2602)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/everyone_is_a_dba_sqlserver_architecture.html" target="_blank" title="25. 人人都是 DBA（I）SQL Server 体系结构(2475)">25. 人人都是 DBA（I）SQL...(2475)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/everyone_is_a_dba_sqlserver_database_files.html" target="_blank" title="26. 人人都是 DBA（V）SQL Server 数据库文件(2463)">26. 人人都是 DBA（V）SQL...(2463)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/06/01/aop_interception_with_unity.html" target="_blank" title="27. 使用Unity进行AOP对象拦截(2437)">27. 使用Unity进行AOP对象...(2437)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/12/service_locator_pattern.html" target="_blank" title="28. Service Locator 模式(2400)">28. Service Locator 模式 (2400)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/opensource_ip_video_surveillance_system_part_3_commandline.html" target="_blank" title="29. 开源倾情奉献：基于.NET打造IP智能网络视频监控系统（三）命令行工具集(2329)">29. 开源倾情奉献：基于.N...(2329)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/14/csharp_async_tcp_client.html" target="_blank" title="30. C# 对 TCP 客户端的状态封装(2284)">30. C# 对 TCP 客户端的状...(2284)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/concurrent_dictionary_vs_dictionary_plus_locking.html" target="_blank" title="31. ConcurrentDictionary 对决 Dictionary+Locking(2218)">31. ConcurrentDictionary...(2218)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/everyone_is_a_dba_sqlserver_metadata.html" target="_blank" title="32. 人人都是 DBA（II）SQL Server 元数据(2173)">32. 人人都是 DBA（II）SQ...(2173)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/24/csharp_binary_tree.html" target="_blank" title="33. 你曾实现过二叉树吗(2166)">33. 你曾实现过二叉树吗 (2166)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/complexity_of_algorithms.html" target="_blank" title="34. 算法复杂度分析(2053)">34. 算法复杂度分析 (2053)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/11/open_source_tail_tailui.html" target="_blank" title="35. C#开源文件实时监控工具Tail&amp;TailUI(2037)">35. C#开源文件实时监控工...(2037)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/05/21/nsubstitute_get_started.html" target="_blank" title="36. NSubstitute完全手册（一）入门基础(1984)">36. NSubstitute完全手册（...(1984)</a></li><li><a href="http://www.cnblogs.com/gaochundong/p/design_patterns.html" target="_blank" title="37. 设计模式之美(1932)">37. 设计模式之美 (1932)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/04/24/csharp_generate_mongodb_objectid.html" target="_blank" title="38. C# 生成 MongoDB 中的 ObjectId(1895)">38. C# 生成 MongoDB 中的...(1895)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/06/06/entityframework_usage_repository_unitofwork.html" target="_blank" title="39. EntityFramework用法探索（四）Repository和UnitOfWork(1825)">39. EntityFramework用法探...(1825)</a></li><li><a href="http://www.cnblogs.com/gaochundong/archive/2013/06/06/entityframework_usage_database_first.html" target="_blank" title="40. EntityFramework用法探索（一）DatabaseFirst(1770)">40. EntityFramework用法探...(1770)</a></li></ul></div>
</div>
</div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2015 Dennis Gao
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<script type="text/javascript" language="javascript"> 

$(document).ready(function () {
    var header_info_customization_timer_counter = 0;
    var header_info_customization_timer = setInterval(function ()
    {
        if (header_info_customization_timer_counter <= 3) {
            header_info_customization_timer_counter++;
        } else {
            clearInterval(header_info_customization_timer);
        }
        if ($(".blogStats").length > 0)
        {
            customize_stats_display();
            clearInterval(header_info_customization_timer);
        }
    }, 500);
	
    var comment_customization_timer_counter = 0;
    var comment_customization_timer = setInterval(function ()
    {
        if (comment_customization_timer_counter <= 3) {
            comment_customization_timer_counter++;
        } else {
            clearInterval(comment_customization_timer);
        }
        if ($("#comments_pager_bottom").length > 0)
        {
            customize_comment_display();
            clearInterval(comment_customization_timer);
        }
    }, 500);
	
    var digg_customization_timer_counter = 0;
    var digg_customization_timer = setInterval(function ()
    {
        if (digg_customization_timer_counter <= 3) {
            digg_customization_timer_counter++;
        } else {
            clearInterval(digg_customization_timer);
        }
        if($("#div_digg").length > 0)
        {
            $("#div_digg").prepend(
              "<div id='follow_me' style='padding-bottom: 5px'>"+
                  "<a id='follow_me_dennis' onclick='follow_me();' href='javascript:void(0);' style='font-weight: bold; padding-left:5px;'>+加关注</a>" +
              "</div>");

            $('#div_digg').append(
              "<div id='goto_page_top' style='padding-top: 5px'>" +
                "<a onclick='javascript:goto_comment();' href='javascript:void(0);' style='font-weight: bold; padding-left: 5px;'>快速评论</a>" + 
                "&nbsp;&nbsp;" +
                "<a href='#top' style='font-weight: bold; padding-left: 5px;'>返回顶部</a>" +
              "</div>");

            retrieve_follow_result();
            clearInterval(digg_customization_timer);      
        }
    }, 1000);
	
    var sidebar_post_list_customization_timer_counter = 0;
    var sidebar_post_list_customization_timer = setInterval(function ()
    {
        if (sidebar_post_list_customization_timer_counter <= 3) {
            sidebar_post_list_customization_timer_counter++;
        } else {
            clearInterval(sidebar_post_list_customization_timer);
        }
        if ($("#TopViewPostsBlock").length > 0 && $("#TopViewPostsBlock ul li").children().size() > 0)
        {
            customize_sidebar_post_list_display("#TopViewPostsBlock ul li");
            clearInterval(sidebar_post_list_customization_timer);
        }
    }, 800);
	
    //var sidebar_tag_cloud_customization_timer_counter = 0;
    //var sidebar_tag_cloud_customization_timer = setInterval(function ()
    //{
    //    if (sidebar_tag_cloud_customization_timer_counter <= 3) {
    //        sidebar_tag_cloud_customization_timer_counter++;
    //    } else {
    //        clearInterval(sidebar_post_list_customization_timer);
    //    }
    //    if ($(".catListTag").length > 0 && $(".catListTag ul li").children().size() > 0)
    //    {
    //        customize_sidebar_tag_cloud_display();
    //        clearInterval(sidebar_tag_cloud_customization_timer);
    //    }
    //}, 600);
});

function retrieve_follow_result() {
    var retrieve_follow_result_timer_counter = 0;
    var retrieve_follow_result_timer = setInterval(function ()
    {
        if (retrieve_follow_result_timer_counter <= 3) {
            retrieve_follow_result_timer_counter++;
        } else {
            clearInterval(retrieve_follow_result_timer);
        }
		
        var follow_result_text = $('#p_b_follow').text();
        if(follow_result_text == '关注成功' || follow_result_text == '关注失败' || follow_result_text == '已关注 -取消')
        {
            $('#follow_me_dennis').text('感谢您的关注');
            clearTimeout(retrieve_follow_result_timer);
        }
        else if(follow_result_text == '+加关注')
        {
            clearTimeout(retrieve_follow_result_timer);
        }
    }, 500);
}

function follow_me() {
    cnblogs.UserManager.FollowBlogger('01e7fb75-bbe0-df11-ac81-842b2b196315');
    retrieve_follow_result();
}

function goto_comment() { 
    document.getElementById("tbCommentBody").focus(); 
}

function customize_comment_display() {
    var comment_table_part1 =
    '<div class="dennis_comment_list">' +
        '<table class="dennis_comment_table_commentator" border="0" cellspacing="0" cellpadding="0"> ' +
        '<tr>' +
            '<td class="dennis_comment" align="left" valign="top">' +
                '<table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> ' +
                    '<tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> ' +
                    '<tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>';

    var comment_table_part2 = '</p> </td> <td class="right"></td></tr> ' +
                    '<tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> ' +
                '</table>' +
            '</td> ' +
            '<td class="dennis_comment_avatar" align="right" valign="top">' +
                '<img src="';
				
    var comment_table_part3 = '"/>' +
            '</td>' +
        '</tr> ' +
        '</table> ' +
    '</div>';

    $.each($(".feedbackItem"), function (i, item) {	
        var comment_item_body = $(item).find(".blog_comment_body");
        var comment_item_body_id = comment_item_body[0].id; 
        var comment_item_id = comment_item_body_id.substr(comment_item_body_id.lastIndexOf("_") + 1);
        var comment_item_commentator_avatar_url = $("#comment_" + comment_item_id + "_avatar").html();
        if(comment_item_commentator_avatar_url == null){
            var random_avatar_number = Math.floor((Math.random() * 10) + 1);
            comment_item_commentator_avatar_url = 'http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_commentator_identicons_default_avatar' + random_avatar_number +'.png';
        }
	
        $(comment_item_body).html(comment_table_part1 + $(comment_item_body).html() + comment_table_part2 + comment_item_commentator_avatar_url + comment_table_part3);
    });
    $(".louzhu").closest(".feedbackItem").find(".dennis_comment_table_commentator").removeClass("dennis_comment_table_commentator").addClass("dennis_comment_table_louzhu");
}

function customize_stats_display() {
    var stats = $(".blogStats").html().toString().replace(/[\n|\t]/g, "");
    var blogs = /随笔\s*\-\s*(\d+)/;
    var comments = /评论\s*\-\s*(\d+)/;
    var blog_count = stats.match(blogs);
    var comment_count = stats.match(comments);
    var new_stats = "<font>{ 文章 : " + blog_count[1] + ", 评论 : " + comment_count[1] + " }</font>";
    $(".blogStats").html(new_stats)
}

function customize_sidebar_tag_cloud_display() {
    $(".catListTag .catListTitle").html("标签");
    $(".catListTag").css("overflow", "hidden");
	
    $(".catListTag ul").append(
		'<li><a href="http://www.cnblogs.com/gaochundong/tag/Inversion%20of%20Control/">Inversion of Control</a>(11)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/Entity%20Framework/">Entity Framework</a>(33)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/Performance%20Tuning/">Performance Tuning</a>(15)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/TDD/">TDD</a>(60)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/WinDbg/">WinDbg</a>(40)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/WCF/">WCF</a>(35)</li>');
		
    $(".catListTag ul li").each(function (i, item) {
        var link = $(item).find('a').attr('href');
        var tag = $(item).find('a').text();
        var text = $(item).text();
        var count = text.match(/.*\((\d+)\).*/);
        if(count == null) {
            $(item).remove();
            return true;
        }
        var fontsize = Math.ceil((count[1] / 30) * 100 + 50) + "%";
        var lineheight = Math.ceil(Math.ceil((count[1] / 45) * 100 + 50) / 100 * 22) + "px";
        $(item)
			.html("<a href='" + link + "' target='_blank' title='" + text +"'>" + tag + "</a>")
			.css("font-size", fontsize)
			.css("line-height", lineheight);
    });

    $(".catListTag ul").each(function(){
        var $ul = $(this);
        var $items = $ul.children('li');
        $items.sort( function(a, b){
            var r = parseInt( Math.random() * 10 );
            var isOddOrEven = r % 2;
            var isPosOrNeg = r > 5 ? 1 : -1;
            return (isOddOrEven * isPosOrNeg);
        })
		.appendTo($ul);            
    }).append('<li><a href="http://www.cnblogs.com/gaochundong/tag/">更多...</a></li>');
}

function customize_sidebar_post_list_display(selectorName) {
    $(selectorName).each( function (i, item) {
        var post_link = $(item).find('a').attr('href');
        var post_title = $(item).find('a').text();

        var regex = /(.+)(\(\d+\))/;
        var groups = post_title.match(regex);
        var prefix = groups[1];
        var number = groups[2];
		
        var total_length = 33;
        var dots = " ";
        var limit = total_length - number.length;
        var prefix_length = get_length(prefix);
        if(prefix_length > limit - dots.length) {
            dots = "...";
            prefix = cut_str(prefix, limit - dots.length);            
        }

        $(item).html("<a href='" + post_link + "' target='_blank' title='" + post_title +"'>" + prefix + dots + number + "</a>");
    });
}

function get_length(str) {
    var l = 0, c = -1;
    for (var i = 0; i < str.length; i++) {
        c = str.charCodeAt(i);
        if (c >= 0 && c <= 128) l += 1;
        else l += 2;
    }
    return l;
}

function cut_str(str, len) {
    var str_length = 0, c = -1;
    var str_cut = new String();

    for (var i = 0; i < str.length; i++) {
        c = str.charCodeAt(i);
        if (c >= 0 && c <= 128) str_length += 1;
        else str_length += 2;

        str_cut = str_cut.concat(String.fromCharCode(c));
        if (str_length >= len) {
            return str_cut;
        }
    }

    if (str_length < len) {
        return str;
    }
}

</script><script src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/check_359604.js" type="text/javascript" async=""></script><iframe class="lbzytbpobywluyenmmgu" style="visibility: hidden; display: none;" src="%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8D%B0%E8%B1%A1%E6%B4%BE%EF%BC%9A%E5%86%99%E7%82%B9%E5%A5%BD%E4%BB%A3%E7%A0%81%E5%90%A7%20-%20Dennis%20Gao%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/container.htm"></iframe>
<!--PageEndHtml Block End-->


</body></html>