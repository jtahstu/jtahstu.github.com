<!DOCTYPE HTML>
<html>

<head>
  <title>数据结构之排序</title>
  <link rel="shortcut icon" href="/jtahstu.github.com/images/favicon.ico" />
  <meta name="description" content="website description" />
  <meta name="keywords" content="website keywords, website keywords" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Tangerine&amp;v1" />
  <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz" />
  <link rel="stylesheet" type="text/css" href="style/style.css" />
</head>

<body>
  <div id="main">
    <div id="header">
      <div id="logo">
        <h1>jtahstu's blogs</h1>
        <div class="slogan">Here some notes!</div>
      </div>
      <div id="menubar">
        <ul id="menu">
          <!-- put class="current" in the li tag for the selected page - to highlight which page you're on -->
          <li><a href="../../index.html">Home</a></li>
					<li><a href="https://jtahstu.github.io/akoj.github.io/" target="_blank">OJ题解</a></li>
					<li><a href="../../classify/biji/index.html" target="_blank">笔记</a></li>
					<li><a href="../../classify/zongjie/index.html" target="_blank">总结</a></li>
					<li><a href="../../classify/wenzhang/index.html" target="_blank">文章</a></li>
		  <li><a href="../../aboute me/resume/index.html">About me</a></li>
        </ul>
      </div>
    </div>
    <div id="site_content">
      <div id="sidebar_container">
        <img class="paperclip" src="style/paperclip.png" alt="paperclip" /><img class="paperclip" src="style/paperclip.png" alt="paperclip" /><img class="paperclip" src="style/paperclip.png" alt="paperclip" />
        <div class="sidebar">
          <h3>数据结构-排序</h3>
          <h5>2015/3/8 12:00</h5>
          <p>本文为数据结构中排序的笔记，介绍了近十种排序的方法。</p>
        </div>
      </div>	
    <div id="content">
        <!-- insert the page content here -->
      <h1>数据结构之排序</h1>
      <!-- <h2> 内部排序<br>
        插入排序<br>
        快速排序<br>
        堆及选择排序<br>
        归并排序<br>
        基数排序</h2> -->
      <h2> 10.1 概述<br></h2>
        1、排序：将一个数据元素（或记录）的任意序列，重新排列成一个按关键字有序的序列。<br>
        2、排序：无序-&gt;有序<br>
        性质：稳定排序/不稳定排序<br>
        分类：内部排序，外部排序<br>
        常用内部排序：插入排序、希尔排序、快速排序、选择排序、堆排序、归并排序、基数排序</p>
      <h2> 10.2 插入排序</h2>
        <p>1.1、插入排序的思想：将一个元素插入到一个有序表中<br>
        插入位置方法不同：直接插入、折半插入、2路插入、表插入<br>
        1.2、直接插入排序：最简单的排序方法<br>
        思想：将一个元素向一个有序序列插入<img src="style/image001.gif" width="468" height="321"><br>
        1.3、直接插入排序算法：<br>
        void InsertSort(RecType R[],int n) //对R[0..n-1]按递增有序进行直接插入排序<br>
        {<br>
        int i,j,k;<br>
        RecType tmp;<br>
        for (i=1;i&lt;n;i++) <br>
        {<br>
        tmp=R[i];<br>
        j=i-1;            //从右向左在有序区R[0..i-1]中找R[i]的插入位置<br>
        while (j&gt;=0 &amp;&amp; tmp.key&lt;R[j].key) <br>
        {<br>
        R[j+1]=R[j]; //将关键字大于R[i].key的记录后移<br>
        j--;<br>
        }<br>
        R[j+1]=tmp;      //在j+1处插入R[i]<br>
        }<br>
        }<br>
        1.4、算法分析<br>
        时间复杂度O(n2)，空间复杂度O(1)<br>
        1.5、稳定的排序方法</p>
        </p>
      <p>2、折半插入排序<br>
        2.1、思想：查找过程用折半查找方法<br>
        2.2、折半插入算法：<br>
        void InsertSort1(RecType R[],int n) //对R[0..n-1]按递增有序进行直接插入排序<br>
        {<br>
        int i,j,low,high,mid;<br>
        RecType tmp;<br>
        for (i=1;i&lt;n;i++) <br>
        {<br>
        tmp=R[i];<br>
        low=0;high=i-1;<br>
        while (low&lt;=high)<br>
        {<br>
        mid=(low+high)/2;<br>
        if (tmp.key&lt;R[mid].key)<br>
        high=mid-1;<br>
        else<br>
        low=mid+1;<br>
        }<br>
        for (j=i-1;j&gt;=high+1;j--)<br>
        R[j+1]=R[j];<br>
        R[high+1]=tmp;<br>
        }<br>
        }<br>
        2.4、算法分析<br>
        时间复杂度O(n2)，空间复杂度O(1)<br>
      2.5、稳定的排序方法</p>
      <p>3、2-路插入排序<br>
        减少直接插入法的移动元素的个数，分成2路子有序序列<br>
        需要n个记录的辅助空间</p>
      <p>4、表插入排序<br>
        对静态链表作插入排序<br>
        将一个记录插入到已排序好的的有序表中<br>
        以修改2n次指针值代替移动记录</p>
      <p>5.1、希尔排序<br>
        缩小增量排序，属于插入排序<br>
        5.2、算法思想：先将整个待排序记录分割成若干个子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再进行一次全体记录的插入排序<br>
        5.3、希尔排序算法<br>
        void ShellSort(RecType R[],int n)	//希尔排序算法<br>
        {<br>
        int i,j,gap,k;<br>
        RecType tmp;<br>
        gap=n/2;				//增量置初值<br>
        while (gap&gt;0)<br>
        {	for (i=gap;i&lt;n;i++) //对所有相隔gap位置的所有元素组进行排序<br>
        {	tmp=R[i];<br>
        j=i-gap;<br>
        while (j&gt;=0 &amp;&amp; tmp.key&lt;R[j].key)//对相隔gap位置的元素组进行排序<br>
        {	R[j+gap]=R[j];<br>
        j=j-gap;<br>
        }<br>
        R[j+gap]=tmp;<br>
        j=j-gap;<br>
        }<br>
        gap=gap/2;	//减小增量<br>
        }<br>
        }<br>
        5.4、算法分析<br>
        时间复杂度O(n1.3)，空间复杂度O(1)<br>
        5.5、不稳定的排序方法</p>
      <h2> 10.3 交换排序<br></h2>
        1、冒泡排序<br>
        1.1、思想：依次比较第i个关键字和第i+1个关键字，大者排后，一趟得到最大值<img src="style/image002.gif" width="519" height="359"><br>
        1.2、冒泡排序算法：<br>
        void BubbleSort(RecType R[],int n)<br>
        {<br>
        int i,j,k;<br>
        RecType tmp;<br>
        for (i=0;i&lt;n-1;i++) <br>
        {<br>
        for (j=n-1;j&gt;i;j--)	//比较,找出本趟最小关键字的记录<br>
        if (R[j].key&lt;R[j-1].key) <br>
        {<br>
        tmp=R[j];  //R[j]与R[j-1]进行交换,将最小关键字记录前移<br>
        R[j]=R[j-1];<br>
        R[j-1]=tmp;<br>
        }<br>
        }<br>
        }<br>
        1.3、算法分析<br>
        时间复杂度O(n2)，空间复杂度O(1)<br>
        1.4、稳定的排序方法 </p>
      <p>2、快速排序<br>
        2.1、思想：一趟排序将序列分成两个部分，前者小于某个值（第一个值），后者大于某个值（第一个值）。之后再次分别快速排序。<img src="style/image003.gif" width="520" height="325"><br>
        2.2、快速排序算法：<br>
        void QuickSort(RecType R[],int s,int t) //对R[s]至R[t]的元素进行快速排序<br>
        {<br>
        int i=s,j=t;<br>
        RecType tmp;<br>
        if (s&lt;t) 				//区间内至少存在两个元素的情况<br>
        { <br>
        tmp=R[s];     		//用区间的第1个记录作为基准<br>
        while (i!=j)  		//从区间两端交替向中间扫描,直至i=j为止<br>
        { <br>
        while (j&gt;i &amp;&amp; R[j].key&gt;=tmp.key) <br>
        j--;  		//从右向左扫描,找第1个小于tmp.key的R[j]<br>
        R[i]=R[j];		//找到这样的R[j],R[i]&quot;R[j]交换<br>
        while (i&lt;j &amp;&amp; R[i].key&lt;=tmp.key) <br>
        i++;		//从左向右扫描,找第1个大于tmp.key的记录R[i]<br>
        R[j]=R[i];		//找到这样的R[i],R[i]&quot;R[j]交换<br>
        }<br>
        R[i]=tmp;<br>
        QuickSort(R,s,i-1);    	//对左区间递归排序<br>
        QuickSort(R,i+1,t);    	//对右区间递归排序<br>
        }<br>
        }<br>
        2.3、算法分析<br>
        时间复杂度O(nlog2(n))，空间复杂度O(log2(n))<br>
        2.4、不稳定的排序方法 </p>
      <h2> 10.4 选择排序<br></h2>
        选择排序基本思想：每一趟在n-i+1个记录中选取关键字最小的记录作为有序序列中第i个记录<br>
        1、直接选择排序<br>
        1.1、思想：从当前无序区中选出关键字最小的元素R[k],将它与无序区的第一个元素R[i]交换，使R[0..i]和R[i+1..n-1]分别变为新的有序区和新的无序区<img src="style/image004.gif" width="511" height="310"><br>
        1.2、直接选择排序算法：<br>
        void SelectSort(RecType R[],int n)<br>
        {<br>
        int i,j,k,l;<br>
        RecType temp;<br>
        for (i=0;i&lt;n-1;i++)    	 	//做第i趟排序<br>
        {<br>
        k=i;<br>
        for (j=i+1;j&lt;n;j++)  	//在当前无序区R[i..n-1]中选key最小的R[k]<br>
        if (R[j].key&lt;R[k].key)<br>
        k=j;           	//k记下目前找到的最小关键字所在的位置<br>
        if (k!=i)          		//交换R[i]和R[k]<br>
        {<br>
        temp=R[i];<br>
        R[i]=R[k];<br>
        R[k]=temp; <br>
        }<br>
        }<br>
        }<br>
        1.3、算法分析<br>
        时间复杂度：O(n2) , 空间复杂度：O(1)<br>
        1.4、不稳定的排序方法</p>
      <p>2、堆排序<br>
        堆的定义：n个元素的序列{k1,k2,...,kn}当且仅当满足下列关系时，称为堆：Ki&lt;=K2*i且Ki&lt;=K2*i+1或Ki&gt;=K2*i且Ki&gt;=K2*i+1<br>
        (1&lt;=i&lt;=n/2向上取整)</p>
      <p>2.1、堆排序过程：<br>
        输出堆顶元素<br>
        将剩余的n-1个元素序列重新建成一个堆，再输出堆顶元素<br>
        实现堆排序需要解决2个问题：<br>
        如何从一个无序的序列建立一个堆<br>
        如何在输出堆顶元素后，调整剩余元素为一个新的堆</p>
      <p>2.2、堆排序的算法：<br>
        void sift(RecType R[],int low,int high)<br>
        {<br>
        int i=low,j=2*i;     					//R[j]是R[i]的左孩子<br>
        RecType temp=R[i];<br>
        while (j&lt;=high)<br>
        {<br>
        if (j&lt;high &amp;&amp; R[j].key&lt;R[j+1].key) 	//若右孩子较大,把j指向右孩子<br>
        j++;    							//变为2i+1<br>
        if (temp.key&lt;R[j].key)<br>
        {<br>
        R[i]=R[j];              			//将R[j]调整到双亲结点位置上<br>
        i=j;                    			//修改i和j值,以便继续向下筛选<br>
        j=2*i;<br>
        }<br>
        else break;                 			//筛选结束<br>
        }<br>
        R[i]=temp;                      			//被筛选结点的值放入最终位置<br>
        }<br>
        void HeapSort(RecType R[],int n)<br>
        {<br>
        int i;<br>
        RecType tmp;<br>
        for(i=n/2; i&gt;=1; i--)		//循环建立初始堆<br>
        sift(R,i,n);<br>
        for(i=n; i&gt;=2; i--)			//进行n-1趟堆排序，每一趟堆排序的袁旭个数减一<br>
        {<br>
        tmp=R[1];			//将最后一个元素同当前区间内R[1]对换<br>
        R[1]=R[i];<br>
        R[i]=tmp;<br>
        sift(R,1,n-1);			//筛选R[1]节点，得到i-1个节点的堆<br>
        }<br>
        }<br>
        2.3、算法分析<br>
        时间复杂度：O(nlog2(n)) , 空间复杂度：O(1)<br>
        2.4、不稳定的排序方法</p>
      <h2> 10.5 归并排序.</h2>
      <p>1.1、思想：多次将两个或两个以上的有序表组合成一个新的有序表<br>
        1.2、归并排序算法：<br>
        void Merge(RecType R[],int low,int mid,int high)<br>
        {<br>
        RecType *R1;<br>
        int i=low,j=mid+1,k=0; //k是R1的下标,i、j分别为第1、2段的下标<br>
        R1=(RecType *)malloc((high-low+1)*sizeof(RecType));  //动态分配空间<br>
        while (i&lt;=mid &amp;&amp; j&lt;=high)     	//在第1段和第2段均未扫描完时循环<br>
        if (R[i].key&lt;=R[j].key)    	//将第1段中的记录放入R1中<br>
        {<br>
        R1[k]=R[i];<br>
        i++;k++;<br>
        }<br>
        else                       		//将第2段中的记录放入R1中<br>
        {<br>
        R1[k]=R[j];<br>
        j++;k++;<br>
        }<br>
        while (i&lt;=mid)          	       	//将第1段余下部分复制到R1<br>
        {<br>
        R1[k]=R[i];<br>
        i++;k++;<br>
        }<br>
        while (j&lt;=high)                	//将第2段余下部分复制到R1<br>
        {<br>
        R1[k]=R[j];<br>
        j++;k++;<br>
        }<br>
        for (k=0,i=low;i&lt;=high;k++,i++) //将R1复制回R中<br>
        R[i]=R1[k];<br>
        }<br>
        void MergePass(RecType R[],int length,int n)	//对整个数序进行一趟归并<br>
        {<br>
        int i;<br>
        for (i=0;i+2*length-1&lt;n;i=i+2*length) 	//归并length长的两相邻子表<br>
        Merge(R,i,i+length-1,i+2*length-1);<br>
        if (i+length-1&lt;n)                		//余下两个子表,后者长度小于length<br>
        Merge(R,i,i+length-1,n-1);  		//归并这两个子表<br>
        }<br>
        void MergeSort(RecType R[],int n)			//自底向上的二路归并算法<br>
        {<br>
        int length;<br>
        for (length=1;length&lt;n;length=2*length)//进行log2n趟归并<br>
        MergePass(R,length,n);<br>
        }<br>
        1.3、算法分析<br>
        时间复杂度：O(nlog2(n)) , 空间复杂度：O(n)<br>
        1.4、稳定的排序方法</p>
      <h2> 10.6 基数排序（了解）<br></h2>
        思想：基数排序是通过&quot;分配&quot;和&quot;收集&quot;过程来实现排序的，不需进行关键字间的比较，是一种借助多关键字排序的思想对单关键字排序的方法。</p>
      <p>基数排序有两种：最低位优先（LSD）和最高位优先（MSD）</p>
      <p>最低位优先的过程是：先按最低位的值对元素进行排序，在此基础上，再按次低位进行排序，依此类推，由低位向高位，每趟都是根据关键字的一位并在前一趟的基础上对所有元素进行排序，直至最高位。</p>
      <h2> 10.7 各种内排序方法的比较和选择<br></h2>
        如图：</p>
        <img src="style/image005.png" width="829" height="270">
      <p>影响因素：-<br>
        1、待排序的元素数目n(问题规模)<br>
        2、元素的大小（每个元素的规模）<br>
        3、关键字的结构及其初始状态<br>
        4、对稳定性的要求<br>
        5、语言工具的条件<br>
        6、存储结构<br>
      7、时间和空间复杂度等</p>
    </div>
    </div>
    <div id="footer">
      <p>All Copyright Reserved 2015/2-2017/7 by jtahstu </p>
    </div>
  </div>
</body>
</html>
